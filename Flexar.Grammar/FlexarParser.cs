//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Flexar.Grammar/Flexar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FlexarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IMPORT=1, NAMESPACE=2, EXPORT=3, USE=4, AS=5, BOOLEAN=6, THIS=7, NEW=8, 
		ENUM=9, STRUCT=10, FUNC=11, CLASS=12, INTERFACE=13, EXTENDS=14, IMPLEMENTS=15, 
		PUBLIC=16, PRIVATE=17, PROTECTED=18, STATIC=19, ABSTRACT=20, FINAL=21, 
		OVERRIDE=22, IF=23, ELSE=24, ELIF=25, SWITCH=26, CASE=27, DEFAULT=28, 
		WHILE=29, DO=30, FOR=31, BREAK=32, CONTINUE=33, RETURN=34, CONST=35, READONLY=36, 
		IN=37, IS=38, TRY=39, CATCH=40, FINALLY=41, INT=42, INT8=43, INT16=44, 
		INT32=45, INT64=46, UINT=47, UINT8=48, UINT16=49, UINT32=50, UINT64=51, 
		FLOAT=52, FLOAT32=53, FLOAT64=54, BOOL=55, CHAR=56, STRING=57, INF=58, 
		TUPLE=59, MAP=60, ERROR=61, NULL=62, ANY=63, DYN=64, TEMPLATE_STRING=65, 
		DEFAULT_STRING=66, DISCARD=67, NAME=68, COMMA=69, DOT=70, COLON=71, DOUBLE_COLON=72, 
		ARROW=73, SEMICOLON=74, OPEN_PAREN=75, CLOSE_PAREN=76, OPEN_BRACE=77, 
		CLOSE_BRACE=78, OPEN_BRACKET=79, CLOSE_BRACKET=80, ASSIGN=81, PLUS_ASSIGN=82, 
		MINUS_ASSIGN=83, STAR_ASSIGN=84, MODULE_ASSIGN=85, DIV_ASSIGN=86, EXP_ASSIGN=87, 
		AND_ASSIGN=88, OR_ASSIGN=89, XOR_ASSIGN=90, SHL_ASSIGN=91, SHR_ASSIGN=92, 
		INF_ASSIGN=93, EQUAL=94, NOT_EQUAL=95, LESS=96, LESS_EQUAL=97, GREATER=98, 
		GREATER_EQUAL=99, AND=100, OR=101, XOR=102, NOT=103, BIT_AND=104, BIT_OR=105, 
		BIT_XOR=106, BIT_NOT=107, SHL=108, SHR=109, PLUS=110, MINUS=111, STAR=112, 
		EXP=113, MODULE=114, DIV=115, INC=116, DEC=117, QUESTION=118, RANGE=119, 
		SPREAD=120, INT_NUM=121, FLOAT_NUM=122, COMMENT=123, WS=124, POINTER_OP=125;
	public const int
		RULE_program = 0, RULE_program_rule = 1, RULE_import_group = 2, RULE_import_rule = 3, 
		RULE_import_namespace = 4, RULE_namespace_name = 5, RULE_namespace = 6, 
		RULE_namespace_call = 7, RULE_class = 8, RULE_class_extends = 9, RULE_class_implements = 10, 
		RULE_class_body = 11, RULE_class_body_rule = 12, RULE_class_attribute = 13, 
		RULE_privacy_modifier = 14, RULE_class_method = 15, RULE_abstract_method = 16, 
		RULE_class_modifier = 17, RULE_constructor = 18, RULE_class_new_instance = 19, 
		RULE_method_call = 20, RULE_attribute_call = 21, RULE_interface = 22, 
		RULE_interface_extends = 23, RULE_interface_body = 24, RULE_interface_body_rule = 25, 
		RULE_interface_method = 26, RULE_interface_attribute = 27, RULE_struct = 28, 
		RULE_struct_body = 29, RULE_struct_attribute = 30, RULE_enum = 31, RULE_enum_body = 32, 
		RULE_enum_attribute = 33, RULE_expression = 34, RULE_composed_value = 35, 
		RULE_list_value = 36, RULE_map_value = 37, RULE_tuple_value = 38, RULE_named_tuple_value = 39, 
		RULE_and_expression = 40, RULE_or_expression = 41, RULE_xor_expression = 42, 
		RULE_not_expression = 43, RULE_expression_math = 44, RULE_term_math = 45, 
		RULE_factor_math = 46, RULE_bitwise_math = 47, RULE_shift_math = 48, RULE_unary_math = 49, 
		RULE_before_unary = 50, RULE_after_unary = 51, RULE_math_value = 52, RULE_parenthesis_expression = 53, 
		RULE_bitwise_operator = 54, RULE_shift_operator = 55, RULE_term_operator = 56, 
		RULE_factor_operator = 57, RULE_comparision_operator = 58, RULE_value = 59, 
		RULE_statement = 60, RULE_new_scope = 61, RULE_for_statement = 62, RULE_for_rule = 63, 
		RULE_for_in = 64, RULE_full_for = 65, RULE_while_statement = 66, RULE_do_while_statement = 67, 
		RULE_switch_statement = 68, RULE_switch_case = 69, RULE_try_statement = 70, 
		RULE_catch_statement = 71, RULE_finally_statement = 72, RULE_if_statement = 73, 
		RULE_elif_statement = 74, RULE_else_statement = 75, RULE_struct_func = 76, 
		RULE_func = 77, RULE_anonymous_func = 78, RULE_func_param = 79, RULE_func_callback = 80, 
		RULE_func_param_callback = 81, RULE_func_param_rule = 82, RULE_func_call = 83, 
		RULE_func_call_params = 84, RULE_func_return = 85, RULE_func_body = 86, 
		RULE_return_statement = 87, RULE_variable_declaration = 88, RULE_variable_assign = 89, 
		RULE_variable_name = 90, RULE_assing = 91, RULE_type = 92, RULE_final_type = 93;
	public static readonly string[] ruleNames = {
		"program", "program_rule", "import_group", "import_rule", "import_namespace", 
		"namespace_name", "namespace", "namespace_call", "class", "class_extends", 
		"class_implements", "class_body", "class_body_rule", "class_attribute", 
		"privacy_modifier", "class_method", "abstract_method", "class_modifier", 
		"constructor", "class_new_instance", "method_call", "attribute_call", 
		"interface", "interface_extends", "interface_body", "interface_body_rule", 
		"interface_method", "interface_attribute", "struct", "struct_body", "struct_attribute", 
		"enum", "enum_body", "enum_attribute", "expression", "composed_value", 
		"list_value", "map_value", "tuple_value", "named_tuple_value", "and_expression", 
		"or_expression", "xor_expression", "not_expression", "expression_math", 
		"term_math", "factor_math", "bitwise_math", "shift_math", "unary_math", 
		"before_unary", "after_unary", "math_value", "parenthesis_expression", 
		"bitwise_operator", "shift_operator", "term_operator", "factor_operator", 
		"comparision_operator", "value", "statement", "new_scope", "for_statement", 
		"for_rule", "for_in", "full_for", "while_statement", "do_while_statement", 
		"switch_statement", "switch_case", "try_statement", "catch_statement", 
		"finally_statement", "if_statement", "elif_statement", "else_statement", 
		"struct_func", "func", "anonymous_func", "func_param", "func_callback", 
		"func_param_callback", "func_param_rule", "func_call", "func_call_params", 
		"func_return", "func_body", "return_statement", "variable_declaration", 
		"variable_assign", "variable_name", "assing", "type", "final_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'namespace'", "'export'", "'use'", "'as'", null, "'this'", 
		"'new'", "'enum'", "'struct'", "'func'", "'class'", "'interface'", "'extends'", 
		"'implements'", "'public'", "'private'", "'protected'", "'static'", "'abstract'", 
		"'final'", "'override'", "'if'", "'else'", "'elif'", "'switch'", "'case'", 
		"'default'", "'while'", "'do'", "'for'", "'break'", "'continue'", "'return'", 
		"'const'", "'readonly'", "'in'", "'is'", "'try'", "'catch'", "'finally'", 
		"'int'", "'int8'", "'int16'", "'int32'", "'int64'", "'uint'", "'uint8'", 
		"'uint16'", "'uint32'", "'uint64'", "'float'", "'float32'", "'float64'", 
		"'bool'", "'char'", "'string'", "'INF'", "'tuple'", "'map'", "'error'", 
		"'null'", "'any'", "'dyn'", null, null, "'_'", null, "','", "'.'", "':'", 
		"'::'", "'->'", "';'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", 
		"'+='", "'-='", "'*='", "'%='", "'/='", "'**='", "'&='", "'|='", "'^='", 
		"'<<='", "'>>='", "':='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
		"'&&'", "'||'", "'^^'", "'!'", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'**'", "'%'", "'/'", "'++'", "'--'", "'?'", "'..'", 
		"'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IMPORT", "NAMESPACE", "EXPORT", "USE", "AS", "BOOLEAN", "THIS", 
		"NEW", "ENUM", "STRUCT", "FUNC", "CLASS", "INTERFACE", "EXTENDS", "IMPLEMENTS", 
		"PUBLIC", "PRIVATE", "PROTECTED", "STATIC", "ABSTRACT", "FINAL", "OVERRIDE", 
		"IF", "ELSE", "ELIF", "SWITCH", "CASE", "DEFAULT", "WHILE", "DO", "FOR", 
		"BREAK", "CONTINUE", "RETURN", "CONST", "READONLY", "IN", "IS", "TRY", 
		"CATCH", "FINALLY", "INT", "INT8", "INT16", "INT32", "INT64", "UINT", 
		"UINT8", "UINT16", "UINT32", "UINT64", "FLOAT", "FLOAT32", "FLOAT64", 
		"BOOL", "CHAR", "STRING", "INF", "TUPLE", "MAP", "ERROR", "NULL", "ANY", 
		"DYN", "TEMPLATE_STRING", "DEFAULT_STRING", "DISCARD", "NAME", "COMMA", 
		"DOT", "COLON", "DOUBLE_COLON", "ARROW", "SEMICOLON", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "STAR_ASSIGN", "MODULE_ASSIGN", "DIV_ASSIGN", 
		"EXP_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "SHL_ASSIGN", "SHR_ASSIGN", 
		"INF_ASSIGN", "EQUAL", "NOT_EQUAL", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", 
		"AND", "OR", "XOR", "NOT", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", 
		"SHL", "SHR", "PLUS", "MINUS", "STAR", "EXP", "MODULE", "DIV", "INC", 
		"DEC", "QUESTION", "RANGE", "SPREAD", "INT_NUM", "FLOAT_NUM", "COMMENT", 
		"WS", "POINTER_OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Flexar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FlexarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlexarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlexarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_groupContext[] import_group() {
			return GetRuleContexts<Import_groupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_groupContext import_group(int i) {
			return GetRuleContext<Import_groupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Program_ruleContext[] program_rule() {
			return GetRuleContexts<Program_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Program_ruleContext program_rule(int i) {
			return GetRuleContext<Program_ruleContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 188;
				import_group();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			@namespace();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1064456L) != 0) || _la==OPEN_PAREN) {
				{
				{
				State = 195;
				program_rule();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class() {
			return GetRuleContext<ClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_funcContext struct_func() {
			return GetRuleContext<Struct_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(FlexarParser.EXPORT, 0); }
		public Program_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterProgram_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitProgram_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Program_ruleContext program_rule() {
		Program_ruleContext _localctx = new Program_ruleContext(Context, State);
		EnterRule(_localctx, 2, RULE_program_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPORT) {
				{
				State = 201;
				Match(EXPORT);
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
			case ABSTRACT:
				{
				State = 204;
				@class();
				}
				break;
			case FUNC:
				{
				State = 205;
				func();
				}
				break;
			case INTERFACE:
				{
				State = 206;
				@interface();
				}
				break;
			case STRUCT:
				{
				State = 207;
				@struct();
				}
				break;
			case OPEN_PAREN:
				{
				State = 208;
				struct_func();
				}
				break;
			case ENUM:
				{
				State = 209;
				@enum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(FlexarParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_ruleContext import_rule() {
			return GetRuleContext<Import_ruleContext>(0);
		}
		public Import_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterImport_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitImport_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_groupContext import_group() {
		Import_groupContext _localctx = new Import_groupContext(Context, State);
		EnterRule(_localctx, 4, RULE_import_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(IMPORT);
			State = 213;
			import_rule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_namespaceContext[] import_namespace() {
			return GetRuleContexts<Import_namespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_namespaceContext import_namespace(int i) {
			return GetRuleContext<Import_namespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(FlexarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(FlexarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] USE() { return GetTokens(FlexarParser.USE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE(int i) {
			return GetToken(FlexarParser.USE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Import_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterImport_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitImport_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_ruleContext import_rule() {
		Import_ruleContext _localctx = new Import_ruleContext(Context, State);
		EnterRule(_localctx, 6, RULE_import_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USE) {
					{
					State = 215;
					Match(USE);
					}
				}

				State = 218;
				import_namespace();
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 219;
					Match(COMMA);
					State = 221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==USE) {
						{
						State = 220;
						Match(USE);
						}
					}

					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NAME) {
						{
						State = 223;
						import_namespace();
						}
					}

					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 231;
				Match(SEMICOLON);
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==USE || _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_namespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(FlexarParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(FlexarParser.AS, 0); }
		public Import_namespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterImport_namespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitImport_namespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_namespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_namespaceContext import_namespace() {
		Import_namespaceContext _localctx = new Import_namespaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			namespace_name();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLE_COLON) {
				{
				State = 238;
				Match(DOUBLE_COLON);
				State = 239;
				Match(NAME);
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 242;
				Match(AS);
				State = 243;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(FlexarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(FlexarParser.DOT, i);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespace_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(NAME);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 247;
				Match(DOT);
				State = 248;
				Match(NAME);
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(FlexarParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(FlexarParser.SEMICOLON, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(NAMESPACE);
			State = 255;
			namespace_name();
			State = 256;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(FlexarParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		public Namespace_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterNamespace_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitNamespace_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_callContext namespace_call() {
		Namespace_callContext _localctx = new Namespace_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_namespace_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 258;
				namespace_name();
				}
				break;
			case 2:
				{
				State = 259;
				Match(NAME);
				}
				break;
			}
			State = 262;
			Match(DOUBLE_COLON);
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 263;
				func_call();
				}
				break;
			case 2:
				{
				State = 264;
				Match(NAME);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FlexarParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(FlexarParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_extendsContext class_extends() {
			return GetRuleContext<Class_extendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_implementsContext class_implements() {
			return GetRuleContext<Class_implementsContext>(0);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 16, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT) {
				{
				State = 267;
				Match(ABSTRACT);
				}
			}

			State = 270;
			Match(CLASS);
			State = 271;
			Match(NAME);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 272;
				class_extends();
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 275;
				class_implements();
				}
			}

			State = 278;
			class_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_extendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(FlexarParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Class_extendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_extends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_extendsContext class_extends() {
		Class_extendsContext _localctx = new Class_extendsContext(Context, State);
		EnterRule(_localctx, 18, RULE_class_extends);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(EXTENDS);
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 281;
				Match(NAME);
				}
				break;
			case OPEN_PAREN:
				{
				State = 282;
				Match(OPEN_PAREN);
				State = 283;
				Match(NAME);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 284;
					Match(COMMA);
					State = 285;
					Match(NAME);
					}
					}
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 291;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_implementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(FlexarParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Class_implementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_implements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_implements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_implements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_implements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_implementsContext class_implements() {
		Class_implementsContext _localctx = new Class_implementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_class_implements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(IMPLEMENTS);
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 295;
				Match(NAME);
				}
				break;
			case OPEN_PAREN:
				{
				State = 296;
				Match(OPEN_PAREN);
				State = 297;
				Match(NAME);
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 298;
					Match(COMMA);
					State = 299;
					Match(NAME);
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 305;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_body_ruleContext[] class_body_rule() {
			return GetRuleContexts<Class_body_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_body_ruleContext class_body_rule(int i) {
			return GetRuleContext<Class_body_ruleContext>(i);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(OPEN_BRACE);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & 144115188109414369L) != 0)) {
				{
				{
				State = 309;
				class_body_rule();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_body_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_attributeContext class_attribute() {
			return GetRuleContext<Class_attributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_methodContext class_method() {
			return GetRuleContext<Class_methodContext>(0);
		}
		public Class_body_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_body_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_body_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_body_ruleContext class_body_rule() {
		Class_body_ruleContext _localctx = new Class_body_ruleContext(Context, State);
		EnterRule(_localctx, 24, RULE_class_body_rule);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				class_attribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				constructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319;
				class_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_modifierContext class_modifier() {
			return GetRuleContext<Class_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Class_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_attributeContext class_attribute() {
		Class_attributeContext _localctx = new Class_attributeContext(Context, State);
		EnterRule(_localctx, 26, RULE_class_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			class_modifier();
			State = 323;
			variable_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privacy_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(FlexarParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(FlexarParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(FlexarParser.PROTECTED, 0); }
		public Privacy_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privacy_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterPrivacy_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitPrivacy_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivacy_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Privacy_modifierContext privacy_modifier() {
		Privacy_modifierContext _localctx = new Privacy_modifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_privacy_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_methodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_modifierContext class_modifier() {
			return GetRuleContext<Class_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_methodContext abstract_method() {
			return GetRuleContext<Abstract_methodContext>(0);
		}
		public Class_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_methodContext class_method() {
		Class_methodContext _localctx = new Class_methodContext(Context, State);
		EnterRule(_localctx, 30, RULE_class_method);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				class_modifier();
				State = 328;
				func();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				abstract_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_methodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(FlexarParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(FlexarParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_paramContext func_param() {
			return GetRuleContext<Func_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		public Abstract_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterAbstract_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitAbstract_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_methodContext abstract_method() {
		Abstract_methodContext _localctx = new Abstract_methodContext(Context, State);
		EnterRule(_localctx, 32, RULE_abstract_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(ABSTRACT);
			State = 334;
			Match(FUNC);
			State = 335;
			Match(NAME);
			State = 336;
			Match(OPEN_PAREN);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 337;
				func_param();
				}
			}

			State = 340;
			Match(CLOSE_PAREN);
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 341;
				func_return();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(FlexarParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privacy_modifierContext privacy_modifier() {
			return GetRuleContext<Privacy_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(FlexarParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(FlexarParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(FlexarParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(FlexarParser.ABSTRACT, 0); }
		public Class_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifierContext class_modifier() {
		Class_modifierContext _localctx = new Class_modifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_class_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT || _la==OVERRIDE) {
				{
				State = 344;
				_la = TokenStream.LA(1);
				if ( !(_la==ABSTRACT || _la==OVERRIDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READONLY) {
				{
				State = 347;
				Match(READONLY);
				}
			}

			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) {
				{
				State = 350;
				privacy_modifier();
				}
			}

			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 353;
				Match(STATIC);
				}
			}

			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 356;
				Match(FINAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Privacy_modifierContext privacy_modifier() {
			return GetRuleContext<Privacy_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_paramContext func_param() {
			return GetRuleContext<Func_paramContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 36, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) {
				{
				State = 359;
				privacy_modifier();
				}
			}

			State = 362;
			Match(NAME);
			State = 363;
			Match(OPEN_PAREN);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 364;
				func_param();
				}
			}

			State = 367;
			Match(CLOSE_PAREN);
			State = 368;
			func_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_new_instanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(FlexarParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(FlexarParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(FlexarParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Class_new_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_new_instance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterClass_new_instance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitClass_new_instance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_new_instance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_new_instanceContext class_new_instance() {
		Class_new_instanceContext _localctx = new Class_new_instanceContext(Context, State);
		EnterRule(_localctx, 38, RULE_class_new_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(NEW);
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 371;
				func_call();
				}
				break;
			case 2:
				{
				State = 372;
				Match(NAME);
				State = 373;
				Match(OPEN_BRACE);
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 374;
					Match(NAME);
					State = 375;
					Match(ASSIGN);
					State = 376;
					expression(0);
					State = 383;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 377;
						Match(COMMA);
						State = 378;
						Match(NAME);
						State = 379;
						Match(ASSIGN);
						State = 380;
						expression(0);
						}
						}
						State = 385;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 388;
				Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FlexarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(FlexarParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 40, RULE_method_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 391;
				Match(THIS);
				}
				break;
			case 2:
				{
				State = 392;
				variable_name();
				}
				break;
			}
			State = 395;
			Match(DOT);
			State = 396;
			func_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext[] func_call() {
			return GetRuleContexts<Func_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call(int i) {
			return GetRuleContext<Func_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(FlexarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(FlexarParser.DOT, i);
		}
		public Attribute_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterAttribute_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitAttribute_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_callContext attribute_call() {
		Attribute_callContext _localctx = new Attribute_callContext(Context, State);
		EnterRule(_localctx, 42, RULE_attribute_call);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 398;
				Match(NAME);
				}
				break;
			case 2:
				{
				State = 399;
				func_call();
				}
				break;
			}
			State = 407;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 405;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 402;
						Match(DOT);
						State = 403;
						Match(NAME);
						}
						break;
					case NAME:
						{
						State = 404;
						func_call();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(FlexarParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_extendsContext interface_extends() {
			return GetRuleContext<Interface_extendsContext>(0);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 44, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(INTERFACE);
			State = 411;
			Match(NAME);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 412;
				interface_extends();
				}
			}

			State = 415;
			interface_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_extendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(FlexarParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Interface_extendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterInterface_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitInterface_extends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_extends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_extendsContext interface_extends() {
		Interface_extendsContext _localctx = new Interface_extendsContext(Context, State);
		EnterRule(_localctx, 46, RULE_interface_extends);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(EXTENDS);
			State = 429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 418;
				Match(NAME);
				}
				break;
			case OPEN_PAREN:
				{
				State = 419;
				Match(OPEN_PAREN);
				State = 420;
				Match(NAME);
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 421;
					Match(COMMA);
					State = 422;
					Match(NAME);
					}
					}
					State = 427;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 428;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_body_ruleContext[] interface_body_rule() {
			return GetRuleContexts<Interface_body_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_body_ruleContext interface_body_rule(int i) {
			return GetRuleContext<Interface_body_ruleContext>(i);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(OPEN_BRACE);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC || _la==NAME) {
				{
				{
				State = 432;
				interface_body_rule();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 438;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_body_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_methodContext interface_method() {
			return GetRuleContext<Interface_methodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_attributeContext interface_attribute() {
			return GetRuleContext<Interface_attributeContext>(0);
		}
		public Interface_body_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterInterface_body_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitInterface_body_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_body_ruleContext interface_body_rule() {
		Interface_body_ruleContext _localctx = new Interface_body_ruleContext(Context, State);
		EnterRule(_localctx, 50, RULE_interface_body_rule);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				interface_method();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				interface_attribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_methodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(FlexarParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_paramContext func_param() {
			return GetRuleContext<Func_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		public Interface_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterInterface_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitInterface_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_methodContext interface_method() {
		Interface_methodContext _localctx = new Interface_methodContext(Context, State);
		EnterRule(_localctx, 52, RULE_interface_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(FUNC);
			State = 445;
			Match(NAME);
			State = 446;
			Match(OPEN_PAREN);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 447;
				func_param();
				}
			}

			State = 450;
			Match(CLOSE_PAREN);
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 451;
				func_return();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FlexarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Interface_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterInterface_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitInterface_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_attributeContext interface_attribute() {
		Interface_attributeContext _localctx = new Interface_attributeContext(Context, State);
		EnterRule(_localctx, 54, RULE_interface_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(NAME);
			{
			State = 455;
			Match(COLON);
			State = 456;
			type();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(FlexarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 56, RULE_struct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(STRUCT);
			State = 459;
			Match(NAME);
			State = 460;
			struct_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_attributeContext[] struct_attribute() {
			return GetRuleContexts<Struct_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_attributeContext struct_attribute(int i) {
			return GetRuleContext<Struct_attributeContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(OPEN_BRACE);
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 463;
				struct_attribute();
				}
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 469;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Struct_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterStruct_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitStruct_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_attributeContext struct_attribute() {
		Struct_attributeContext _localctx = new Struct_attributeContext(Context, State);
		EnterRule(_localctx, 60, RULE_struct_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			variable_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(FlexarParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 62, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(ENUM);
			State = 474;
			Match(NAME);
			State = 475;
			enum_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_attributeContext[] enum_attribute() {
			return GetRuleContexts<Enum_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_attributeContext enum_attribute(int i) {
			return GetRuleContext<Enum_attributeContext>(i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_enum_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(OPEN_BRACE);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 478;
				enum_attribute();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 484;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FlexarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUM() { return GetToken(FlexarParser.INT_NUM, 0); }
		public Enum_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterEnum_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitEnum_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_attributeContext enum_attribute() {
		Enum_attributeContext _localctx = new Enum_attributeContext(Context, State);
		EnterRule(_localctx, 66, RULE_enum_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(NAME);
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 487;
				Match(ASSIGN);
				State = 488;
				Match(INT_NUM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_new_instanceContext class_new_instance() {
			return GetRuleContext<Class_new_instanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER_OP() { return GetToken(FlexarParser.POINTER_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_funcContext anonymous_func() {
			return GetRuleContext<Anonymous_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_callContext namespace_call() {
			return GetRuleContext<Namespace_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_callContext attribute_call() {
			return GetRuleContext<Attribute_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_mathContext expression_math() {
			return GetRuleContext<Expression_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Composed_valueContext composed_value() {
			return GetRuleContext<Composed_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(FlexarParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparision_operatorContext comparision_operator() {
			return GetRuleContext<Comparision_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(FlexarParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FlexarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(FlexarParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(FlexarParser.IS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 492;
				class_new_instance();
				}
				break;
			case 2:
				{
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POINTER_OP) {
					{
					State = 493;
					Match(POINTER_OP);
					}
				}

				State = 496;
				func_call();
				}
				break;
			case 3:
				{
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POINTER_OP) {
					{
					State = 497;
					Match(POINTER_OP);
					}
				}

				State = 500;
				anonymous_func();
				}
				break;
			case 4:
				{
				State = 501;
				value();
				}
				break;
			case 5:
				{
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POINTER_OP) {
					{
					State = 502;
					Match(POINTER_OP);
					}
				}

				State = 505;
				method_call();
				}
				break;
			case 6:
				{
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POINTER_OP) {
					{
					State = 506;
					Match(POINTER_OP);
					}
				}

				State = 509;
				namespace_call();
				}
				break;
			case 7:
				{
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POINTER_OP) {
					{
					State = 510;
					Match(POINTER_OP);
					}
				}

				State = 513;
				attribute_call();
				}
				break;
			case 8:
				{
				State = 514;
				expression_math(0);
				}
				break;
			case 9:
				{
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POINTER_OP) {
					{
					State = 515;
					Match(POINTER_OP);
					}
				}

				State = 518;
				composed_value();
				}
				break;
			case 10:
				{
				State = 519;
				and_expression(0);
				}
				break;
			case 11:
				{
				State = 522;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 520;
					type();
					}
					break;
				case 2:
					{
					State = 521;
					Match(NAME);
					}
					break;
				}
				State = 524;
				Match(OPEN_PAREN);
				State = 525;
				expression(0);
				State = 526;
				Match(CLOSE_PAREN);
				}
				break;
			case 12:
				{
				State = 528;
				Match(NAME);
				}
				break;
			case 13:
				{
				State = 529;
				Match(NULL);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 550;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 548;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 532;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 533;
						comparision_operator();
						State = 534;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 536;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 537;
						Match(QUESTION);
						State = 538;
						expression(0);
						State = 539;
						Match(COLON);
						State = 540;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 542;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 543;
						Match(RANGE);
						State = 544;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 545;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 546;
						Match(IS);
						State = 547;
						type();
						}
						break;
					}
					} 
				}
				State = 552;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Composed_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_valueContext list_value() {
			return GetRuleContext<List_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_valueContext map_value() {
			return GetRuleContext<Map_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_valueContext tuple_value() {
			return GetRuleContext<Tuple_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_tuple_valueContext named_tuple_value() {
			return GetRuleContext<Named_tuple_valueContext>(0);
		}
		public Composed_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composed_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterComposed_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitComposed_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposed_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composed_valueContext composed_value() {
		Composed_valueContext _localctx = new Composed_valueContext(Context, State);
		EnterRule(_localctx, 70, RULE_composed_value);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 553;
				list_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554;
				map_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 555;
				tuple_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 556;
				named_tuple_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public List_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_valueContext list_value() {
		List_valueContext _localctx = new List_valueContext(Context, State);
		EnterRule(_localctx, 72, RULE_list_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(OPEN_BRACE);
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				State = 560;
				expression(0);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 561;
					Match(COMMA);
					State = 562;
					expression(0);
					}
					}
					State = 567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 570;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FlexarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FlexarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Map_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterMap_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitMap_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_valueContext map_value() {
		Map_valueContext _localctx = new Map_valueContext(Context, State);
		EnterRule(_localctx, 74, RULE_map_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(OPEN_BRACE);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				State = 573;
				expression(0);
				State = 574;
				Match(COLON);
				State = 575;
				expression(0);
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 576;
					Match(COMMA);
					State = 577;
					expression(0);
					State = 578;
					Match(COLON);
					State = 579;
					expression(0);
					}
					}
					State = 585;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 588;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Tuple_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterTuple_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitTuple_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_valueContext tuple_value() {
		Tuple_valueContext _localctx = new Tuple_valueContext(Context, State);
		EnterRule(_localctx, 76, RULE_tuple_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(OPEN_PAREN);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				State = 591;
				expression(0);
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 592;
					Match(COMMA);
					State = 593;
					expression(0);
					}
					}
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 601;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_tuple_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FlexarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FlexarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Named_tuple_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_tuple_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterNamed_tuple_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitNamed_tuple_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_tuple_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_tuple_valueContext named_tuple_value() {
		Named_tuple_valueContext _localctx = new Named_tuple_valueContext(Context, State);
		EnterRule(_localctx, 78, RULE_named_tuple_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(OPEN_PAREN);
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 604;
				Match(NAME);
				State = 605;
				Match(COLON);
				State = 606;
				expression(0);
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 607;
					Match(COMMA);
					State = 608;
					Match(NAME);
					State = 609;
					Match(COLON);
					State = 610;
					expression(0);
					}
					}
					State = 615;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 618;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(FlexarParser.AND, 0); }
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		return and_expression(0);
	}

	private And_expressionContext and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_expressionContext _localctx = new And_expressionContext(Context, _parentState);
		And_expressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 621;
			or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 628;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expression);
					State = 623;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 624;
					Match(AND);
					State = 625;
					or_expression(0);
					}
					} 
				}
				State = 630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_expressionContext xor_expression() {
			return GetRuleContext<Xor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FlexarParser.OR, 0); }
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		return or_expression(0);
	}

	private Or_expressionContext or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Or_expressionContext _localctx = new Or_expressionContext(Context, _parentState);
		Or_expressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 632;
			xor_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 639;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_or_expression);
					State = 634;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 635;
					Match(OR);
					State = 636;
					xor_expression(0);
					}
					} 
				}
				State = 641;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Xor_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not_expressionContext not_expression() {
			return GetRuleContext<Not_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_expressionContext xor_expression() {
			return GetRuleContext<Xor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(FlexarParser.XOR, 0); }
		public Xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xor_expressionContext xor_expression() {
		return xor_expression(0);
	}

	private Xor_expressionContext xor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Xor_expressionContext _localctx = new Xor_expressionContext(Context, _parentState);
		Xor_expressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_xor_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 643;
			not_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Xor_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_xor_expression);
					State = 645;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 646;
					Match(XOR);
					State = 647;
					not_expression();
					}
					} 
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Not_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(FlexarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Not_expressionContext not_expression() {
			return GetRuleContext<Not_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(FlexarParser.BOOLEAN, 0); }
		public Not_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterNot_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitNot_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_expressionContext not_expression() {
		Not_expressionContext _localctx = new Not_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_not_expression);
		try {
			State = 656;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 653;
				Match(NOT);
				State = 654;
				not_expression();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655;
				Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_mathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_mathContext term_math() {
			return GetRuleContext<Term_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_mathContext expression_math() {
			return GetRuleContext<Expression_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Factor_operatorContext factor_operator() {
			return GetRuleContext<Factor_operatorContext>(0);
		}
		public Expression_mathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterExpression_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitExpression_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_math(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_mathContext expression_math() {
		return expression_math(0);
	}

	private Expression_mathContext expression_math(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_mathContext _localctx = new Expression_mathContext(Context, _parentState);
		Expression_mathContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_expression_math, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 659;
			term_math(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 667;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_mathContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_math);
					State = 661;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 662;
					factor_operator();
					State = 663;
					term_math(0);
					}
					} 
				}
				State = 669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Term_mathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Factor_mathContext factor_math() {
			return GetRuleContext<Factor_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Term_mathContext term_math() {
			return GetRuleContext<Term_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Term_operatorContext term_operator() {
			return GetRuleContext<Term_operatorContext>(0);
		}
		public Term_mathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterTerm_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitTerm_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_math(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term_mathContext term_math() {
		return term_math(0);
	}

	private Term_mathContext term_math(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Term_mathContext _localctx = new Term_mathContext(Context, _parentState);
		Term_mathContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_term_math, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 671;
			factor_math(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 679;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Term_mathContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term_math);
					State = 673;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 674;
					term_operator();
					State = 675;
					factor_math(0);
					}
					} 
				}
				State = 681;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Factor_mathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_mathContext bitwise_math() {
			return GetRuleContext<Bitwise_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Factor_mathContext factor_math() {
			return GetRuleContext<Factor_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(FlexarParser.EXP, 0); }
		public Factor_mathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFactor_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFactor_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor_math(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factor_mathContext factor_math() {
		return factor_math(0);
	}

	private Factor_mathContext factor_math(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Factor_mathContext _localctx = new Factor_mathContext(Context, _parentState);
		Factor_mathContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_factor_math, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 683;
			bitwise_math(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Factor_mathContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor_math);
					State = 685;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 686;
					Match(EXP);
					State = 687;
					bitwise_math(0);
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bitwise_mathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_mathContext shift_math() {
			return GetRuleContext<Shift_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_mathContext bitwise_math() {
			return GetRuleContext<Bitwise_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_operatorContext bitwise_operator() {
			return GetRuleContext<Bitwise_operatorContext>(0);
		}
		public Bitwise_mathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterBitwise_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitBitwise_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_math(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_mathContext bitwise_math() {
		return bitwise_math(0);
	}

	private Bitwise_mathContext bitwise_math(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bitwise_mathContext _localctx = new Bitwise_mathContext(Context, _parentState);
		Bitwise_mathContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_bitwise_math, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 694;
			shift_math(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 702;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bitwise_mathContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bitwise_math);
					State = 696;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 697;
					bitwise_operator();
					State = 698;
					shift_math(0);
					}
					} 
				}
				State = 704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_mathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_mathContext unary_math() {
			return GetRuleContext<Unary_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_mathContext shift_math() {
			return GetRuleContext<Shift_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_operatorContext shift_operator() {
			return GetRuleContext<Shift_operatorContext>(0);
		}
		public Shift_mathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterShift_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitShift_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_math(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_mathContext shift_math() {
		return shift_math(0);
	}

	private Shift_mathContext shift_math(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_mathContext _localctx = new Shift_mathContext(Context, _parentState);
		Shift_mathContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_shift_math, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 706;
			unary_math();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 714;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Shift_mathContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_shift_math);
					State = 708;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 709;
					shift_operator();
					State = 710;
					unary_math();
					}
					} 
				}
				State = 716;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_mathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Before_unaryContext before_unary() {
			return GetRuleContext<Before_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public After_unaryContext after_unary() {
			return GetRuleContext<After_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Math_valueContext math_value() {
			return GetRuleContext<Math_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesis_expressionContext parenthesis_expression() {
			return GetRuleContext<Parenthesis_expressionContext>(0);
		}
		public Unary_mathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterUnary_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitUnary_math(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_math(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_mathContext unary_math() {
		Unary_mathContext _localctx = new Unary_mathContext(Context, State);
		EnterRule(_localctx, 98, RULE_unary_math);
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717;
				before_unary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				after_unary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 719;
				math_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 720;
				parenthesis_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Before_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(FlexarParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Math_valueContext math_value() {
			return GetRuleContext<Math_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(FlexarParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(FlexarParser.BIT_NOT, 0); }
		public Before_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_before_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterBefore_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitBefore_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBefore_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Before_unaryContext before_unary() {
		Before_unaryContext _localctx = new Before_unaryContext(Context, State);
		EnterRule(_localctx, 100, RULE_before_unary);
		try {
			State = 729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				Match(INC);
				State = 724;
				math_value();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725;
				Match(DEC);
				State = 726;
				math_value();
				}
				break;
			case BIT_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				Match(BIT_NOT);
				State = 728;
				math_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class After_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_valueContext math_value() {
			return GetRuleContext<Math_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(FlexarParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(FlexarParser.DEC, 0); }
		public After_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_after_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterAfter_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitAfter_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfter_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public After_unaryContext after_unary() {
		After_unaryContext _localctx = new After_unaryContext(Context, State);
		EnterRule(_localctx, 102, RULE_after_unary);
		try {
			State = 737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 731;
				math_value();
				State = 732;
				Match(INC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734;
				math_value();
				State = 735;
				Match(DEC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUM() { return GetToken(FlexarParser.INT_NUM, 0); }
		public Math_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterMath_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitMath_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Math_valueContext math_value() {
		Math_valueContext _localctx = new Math_valueContext(Context, State);
		EnterRule(_localctx, 104, RULE_math_value);
		try {
			State = 741;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case DISCARD:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 739;
				variable_name();
				}
				break;
			case INT_NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 740;
				Match(INT_NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesis_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_mathContext expression_math() {
			return GetRuleContext<Expression_mathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		public Parenthesis_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterParenthesis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitParenthesis_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesis_expressionContext parenthesis_expression() {
		Parenthesis_expressionContext _localctx = new Parenthesis_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_parenthesis_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(OPEN_PAREN);
			State = 744;
			expression_math(0);
			State = 745;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(FlexarParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(FlexarParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(FlexarParser.BIT_XOR, 0); }
		public Bitwise_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterBitwise_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitBitwise_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_operatorContext bitwise_operator() {
		Bitwise_operatorContext _localctx = new Bitwise_operatorContext(Context, State);
		EnterRule(_localctx, 108, RULE_bitwise_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL() { return GetToken(FlexarParser.SHL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR() { return GetToken(FlexarParser.SHR, 0); }
		public Shift_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_operatorContext shift_operator() {
		Shift_operatorContext _localctx = new Shift_operatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_shift_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			_la = TokenStream.LA(1);
			if ( !(_la==SHL || _la==SHR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(FlexarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(FlexarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FlexarParser.MODULE, 0); }
		public Term_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterTerm_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitTerm_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term_operatorContext term_operator() {
		Term_operatorContext _localctx = new Term_operatorContext(Context, State);
		EnterRule(_localctx, 112, RULE_term_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 13L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factor_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FlexarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FlexarParser.MINUS, 0); }
		public Factor_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFactor_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFactor_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factor_operatorContext factor_operator() {
		Factor_operatorContext _localctx = new Factor_operatorContext(Context, State);
		EnterRule(_localctx, 114, RULE_factor_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparision_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(FlexarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(FlexarParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(FlexarParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(FlexarParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(FlexarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(FlexarParser.GREATER_EQUAL, 0); }
		public Comparision_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparision_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterComparision_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitComparision_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparision_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparision_operatorContext comparision_operator() {
		Comparision_operatorContext _localctx = new Comparision_operatorContext(Context, State);
		EnterRule(_localctx, 116, RULE_comparision_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(FlexarParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUM() { return GetToken(FlexarParser.INT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUM() { return GetToken(FlexarParser.FLOAT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_STRING() { return GetToken(FlexarParser.DEFAULT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE_STRING() { return GetToken(FlexarParser.TEMPLATE_STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 118, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_la = TokenStream.LA(1);
			if ( !(_la==BOOLEAN || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 216172782113783811L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignContext variable_assign() {
			return GetRuleContext<Variable_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_scopeContext new_scope() {
			return GetRuleContext<New_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(FlexarParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(FlexarParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_statement);
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				variable_assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 761;
				expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 762;
				for_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 763;
				if_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 764;
				while_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 765;
				do_while_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 766;
				switch_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 767;
				try_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 768;
				new_scope();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 769;
				Match(BREAK);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 770;
				Match(CONTINUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public New_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterNew_scope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitNew_scope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_scope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_scopeContext new_scope() {
		New_scopeContext _localctx = new New_scopeContext(Context, State);
		EnterRule(_localctx, 122, RULE_new_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(OPEN_BRACE);
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 774;
				statement();
				}
				}
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 780;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(FlexarParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_ruleContext for_rule() {
			return GetRuleContext<For_ruleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 124, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(FOR);
			State = 783;
			Match(OPEN_PAREN);
			State = 784;
			for_rule();
			State = 785;
			Match(CLOSE_PAREN);
			State = 786;
			Match(OPEN_BRACE);
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 787;
				statement();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 793;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_inContext for_in() {
			return GetRuleContext<For_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_forContext full_for() {
			return GetRuleContext<Full_forContext>(0);
		}
		public For_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFor_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFor_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_ruleContext for_rule() {
		For_ruleContext _localctx = new For_ruleContext(Context, State);
		EnterRule(_localctx, 126, RULE_for_rule);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 795;
				for_in();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				full_for();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FlexarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FlexarParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISCARD() { return GetTokens(FlexarParser.DISCARD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD(int i) {
			return GetToken(FlexarParser.DISCARD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		public For_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFor_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFor_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_in(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_inContext for_in() {
		For_inContext _localctx = new For_inContext(Context, State);
		EnterRule(_localctx, 128, RULE_for_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = TokenStream.LA(1);
			if ( !(_la==DISCARD || _la==NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 800;
			Match(COMMA);
			State = 801;
			_la = TokenStream.LA(1);
			if ( !(_la==DISCARD || _la==NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 802;
			Match(IN);
			State = 803;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(FlexarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(FlexarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Full_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFull_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFull_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_forContext full_for() {
		Full_forContext _localctx = new Full_forContext(Context, State);
		EnterRule(_localctx, 130, RULE_full_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			variable_declaration();
			State = 806;
			Match(SEMICOLON);
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				State = 807;
				expression(0);
				}
			}

			State = 810;
			Match(SEMICOLON);
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				State = 811;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FlexarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 132, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			Match(WHILE);
			State = 815;
			Match(OPEN_PAREN);
			State = 816;
			expression(0);
			State = 817;
			Match(CLOSE_PAREN);
			State = 818;
			Match(OPEN_BRACE);
			State = 822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 819;
				statement();
				}
				}
				State = 824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 825;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(FlexarParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FlexarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitDo_while_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(Context, State);
		EnterRule(_localctx, 134, RULE_do_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(DO);
			State = 828;
			Match(OPEN_BRACE);
			State = 832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 829;
				statement();
				}
				}
				State = 834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 835;
			Match(CLOSE_BRACE);
			State = 836;
			Match(WHILE);
			State = 837;
			Match(OPEN_PAREN);
			State = 838;
			expression(0);
			State = 839;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(FlexarParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_caseContext[] switch_case() {
			return GetRuleContexts<Switch_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_caseContext switch_case(int i) {
			return GetRuleContext<Switch_caseContext>(i);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 136, RULE_switch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(SWITCH);
			State = 842;
			Match(OPEN_PAREN);
			State = 843;
			expression(0);
			State = 844;
			Match(CLOSE_PAREN);
			State = 845;
			Match(OPEN_BRACE);
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 846;
				switch_case();
				}
				}
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 852;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(FlexarParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FlexarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(FlexarParser.DEFAULT, 0); }
		public Switch_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterSwitch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitSwitch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_caseContext switch_case() {
		Switch_caseContext _localctx = new Switch_caseContext(Context, State);
		EnterRule(_localctx, 138, RULE_switch_case);
		int _la;
		try {
			State = 871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				Match(CASE);
				State = 855;
				expression(0);
				State = 856;
				Match(COLON);
				State = 860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
					{
					{
					State = 857;
					statement();
					}
					}
					State = 862;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 863;
				Match(DEFAULT);
				State = 864;
				Match(COLON);
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
					{
					{
					State = 865;
					statement();
					}
					}
					State = 870;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(FlexarParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_statementContext catch_statement() {
			return GetRuleContext<Catch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_statementContext finally_statement() {
			return GetRuleContext<Finally_statementContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 140, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			Match(TRY);
			State = 874;
			Match(OPEN_BRACE);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 875;
				statement();
				}
				}
				State = 880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 881;
			Match(CLOSE_BRACE);
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 882;
				catch_statement();
				}
			}

			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 885;
				finally_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(FlexarParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FlexarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterCatch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitCatch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(Context, State);
		EnterRule(_localctx, 142, RULE_catch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			Match(CATCH);
			State = 889;
			Match(OPEN_PAREN);
			State = 890;
			Match(NAME);
			State = 891;
			Match(COLON);
			State = 892;
			Match(NAME);
			State = 893;
			Match(CLOSE_PAREN);
			State = 894;
			Match(OPEN_BRACE);
			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 895;
				statement();
				}
				}
				State = 900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 901;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(FlexarParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Finally_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFinally_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFinally_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_statementContext finally_statement() {
		Finally_statementContext _localctx = new Finally_statementContext(Context, State);
		EnterRule(_localctx, 144, RULE_finally_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			Match(FINALLY);
			State = 904;
			Match(OPEN_BRACE);
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 905;
				statement();
				}
				}
				State = 910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 911;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FlexarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext[] elif_statement() {
			return GetRuleContexts<Elif_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement(int i) {
			return GetRuleContext<Elif_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 146, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			Match(IF);
			State = 914;
			Match(OPEN_PAREN);
			State = 915;
			expression(0);
			State = 916;
			Match(CLOSE_PAREN);
			State = 917;
			Match(OPEN_BRACE);
			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 918;
				statement();
				}
				}
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 924;
			Match(CLOSE_BRACE);
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 925;
				elif_statement();
				}
				}
				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 931;
				else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(FlexarParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 148, RULE_elif_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(ELIF);
			State = 935;
			Match(OPEN_PAREN);
			State = 936;
			expression(0);
			State = 937;
			Match(CLOSE_PAREN);
			State = 938;
			Match(OPEN_BRACE);
			State = 942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 939;
				statement();
				}
				}
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 945;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FlexarParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 150, RULE_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			Match(ELSE);
			State = 948;
			Match(OPEN_BRACE);
			State = 952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 949;
				statement();
				}
				}
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 955;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(FlexarParser.STAR, 0); }
		public Struct_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterStruct_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitStruct_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_funcContext struct_func() {
		Struct_funcContext _localctx = new Struct_funcContext(Context, State);
		EnterRule(_localctx, 152, RULE_struct_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			Match(OPEN_PAREN);
			State = 958;
			Match(NAME);
			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 959;
				Match(STAR);
				}
			}

			State = 962;
			Match(NAME);
			State = 963;
			Match(CLOSE_PAREN);
			State = 964;
			func();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(FlexarParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_paramContext func_param() {
			return GetRuleContext<Func_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 154, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(FUNC);
			State = 967;
			Match(NAME);
			State = 968;
			Match(OPEN_PAREN);
			State = 970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 969;
				func_param();
				}
			}

			State = 972;
			Match(CLOSE_PAREN);
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770688L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 17592186044545L) != 0)) {
				{
				State = 973;
				func_return();
				}
			}

			State = 976;
			func_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(FlexarParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(FlexarParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_paramContext func_param() {
			return GetRuleContext<Func_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		public Anonymous_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterAnonymous_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitAnonymous_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_funcContext anonymous_func() {
		Anonymous_funcContext _localctx = new Anonymous_funcContext(Context, State);
		EnterRule(_localctx, 156, RULE_anonymous_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			Match(FUNC);
			State = 979;
			Match(OPEN_PAREN);
			State = 981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 980;
				func_param();
				}
			}

			State = 983;
			Match(CLOSE_PAREN);
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770688L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 17592186044545L) != 0)) {
				{
				State = 984;
				func_return();
				}
			}

			State = 987;
			Match(ARROW);
			State = 988;
			func_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_param_ruleContext[] func_param_rule() {
			return GetRuleContexts<Func_param_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_param_ruleContext func_param_rule(int i) {
			return GetRuleContext<Func_param_ruleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Func_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_paramContext func_param() {
		Func_paramContext _localctx = new Func_paramContext(Context, State);
		EnterRule(_localctx, 158, RULE_func_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			func_param_rule();
			State = 995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 991;
				Match(COMMA);
				State = 992;
				func_param_rule();
				}
				}
				State = 997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_callbackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(FlexarParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_param_callbackContext func_param_callback() {
			return GetRuleContext<Func_param_callbackContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		public Func_callbackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_callback; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_callback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_callback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_callback(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_callbackContext func_callback() {
		Func_callbackContext _localctx = new Func_callbackContext(Context, State);
		EnterRule(_localctx, 160, RULE_func_callback);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			Match(FUNC);
			State = 999;
			Match(OPEN_PAREN);
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770688L) != 0) || _la==NAME || _la==STAR) {
				{
				State = 1000;
				func_param_callback();
				}
			}

			State = 1003;
			Match(CLOSE_PAREN);
			State = 1005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1004;
				func_return();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_param_callbackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Func_param_callbackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_param_callback; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_param_callback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_param_callback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_param_callback(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_param_callbackContext func_param_callback() {
		Func_param_callbackContext _localctx = new Func_param_callbackContext(Context, State);
		EnterRule(_localctx, 162, RULE_func_param_callback);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			type();
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1008;
				Match(COMMA);
				State = 1009;
				type();
				}
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_param_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FlexarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(FlexarParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPREAD() { return GetToken(FlexarParser.SPREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FlexarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Func_param_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_param_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_param_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_param_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_param_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_param_ruleContext func_param_rule() {
		Func_param_ruleContext _localctx = new Func_param_ruleContext(Context, State);
		EnterRule(_localctx, 164, RULE_func_param_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015;
			Match(NAME);
			State = 1017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 1016;
				Match(QUESTION);
				}
			}

			State = 1019;
			Match(COLON);
			State = 1020;
			type();
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPREAD) {
				{
				State = 1021;
				Match(SPREAD);
				}
			}

			State = 1026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1024;
				Match(ASSIGN);
				State = 1025;
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_call_paramsContext func_call_params() {
			return GetRuleContext<Func_call_paramsContext>(0);
		}
		public Func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_callContext func_call() {
		Func_callContext _localctx = new Func_callContext(Context, State);
		EnterRule(_localctx, 166, RULE_func_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			Match(NAME);
			State = 1029;
			Match(OPEN_PAREN);
			State = 1031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4363686770240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				State = 1030;
				func_call_params();
				}
			}

			State = 1033;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_call_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Func_call_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_call_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_call_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_call_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_call_paramsContext func_call_params() {
		Func_call_paramsContext _localctx = new Func_call_paramsContext(Context, State);
		EnterRule(_localctx, 168, RULE_func_call_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			expression(0);
			State = 1040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1036;
				Match(COMMA);
				State = 1037;
				expression(0);
				}
				}
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(FlexarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(FlexarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_returnContext func_return() {
		Func_returnContext _localctx = new Func_returnContext(Context, State);
		EnterRule(_localctx, 170, RULE_func_return);
		int _la;
		try {
			State = 1055;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case CONST:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case UINT:
			case UINT8:
			case UINT16:
			case UINT32:
			case UINT64:
			case FLOAT:
			case FLOAT32:
			case FLOAT64:
			case BOOL:
			case CHAR:
			case STRING:
			case INF:
			case TUPLE:
			case MAP:
			case ERROR:
			case NULL:
			case ANY:
			case NAME:
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043;
				type();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1044;
				Match(OPEN_PAREN);
				State = 1045;
				type();
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1046;
					Match(COMMA);
					State = 1047;
					type();
					}
					}
					State = 1052;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1053;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FlexarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FlexarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Func_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFunc_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFunc_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_bodyContext func_body() {
		Func_bodyContext _localctx = new Func_bodyContext(Context, State);
		EnterRule(_localctx, 172, RULE_func_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			Match(OPEN_BRACE);
			State = 1061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3797212460608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1375995096574465039L) != 0)) {
				{
				{
				State = 1058;
				statement();
				}
				}
				State = 1063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 1064;
				return_statement();
				}
			}

			State = 1067;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(FlexarParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FlexarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FlexarParser.COMMA, i);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 174, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			Match(RETURN);
			{
			State = 1070;
			expression(0);
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1071;
				Match(COMMA);
				State = 1072;
				expression(0);
				}
				}
				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FlexarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FlexarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(FlexarParser.QUESTION, 0); }
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 176, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			Match(NAME);
			{
			State = 1080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 1079;
				Match(QUESTION);
				}
			}

			State = 1082;
			Match(COLON);
			State = 1083;
			type();
			}
			State = 1087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1085;
				Match(ASSIGN);
				State = 1086;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssingContext assing() {
			return GetRuleContext<AssingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterVariable_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitVariable_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignContext variable_assign() {
		Variable_assignContext _localctx = new Variable_assignContext(Context, State);
		EnterRule(_localctx, 178, RULE_variable_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			variable_name();
			State = 1090;
			assing();
			State = 1091;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(FlexarParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FlexarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(FlexarParser.DISCARD, 0); }
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 180, RULE_variable_name);
		try {
			State = 1098;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1093;
				Match(NAME);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1094;
				Match(THIS);
				State = 1095;
				Match(DOT);
				State = 1096;
				Match(NAME);
				}
				break;
			case DISCARD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1097;
				Match(DISCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FlexarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(FlexarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(FlexarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR_ASSIGN() { return GetToken(FlexarParser.STAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE_ASSIGN() { return GetToken(FlexarParser.MODULE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(FlexarParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_ASSIGN() { return GetToken(FlexarParser.EXP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(FlexarParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(FlexarParser.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(FlexarParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL_ASSIGN() { return GetToken(FlexarParser.SHL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR_ASSIGN() { return GetToken(FlexarParser.SHR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INF_ASSIGN() { return GetToken(FlexarParser.INF_ASSIGN, 0); }
		public AssingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterAssing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitAssing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssingContext assing() {
		AssingContext _localctx = new AssingContext(Context, State);
		EnterRule(_localctx, 182, RULE_assing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8191L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Final_typeContext[] final_type() {
			return GetRuleContexts<Final_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Final_typeContext final_type(int i) {
			return GetRuleContext<Final_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(FlexarParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(FlexarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(FlexarParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(FlexarParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(FlexarParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(FlexarParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(FlexarParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(FlexarParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(FlexarParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(FlexarParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUM() { return GetTokens(FlexarParser.INT_NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUM(int i) {
			return GetToken(FlexarParser.INT_NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DYN() { return GetTokens(FlexarParser.DYN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYN(int i) {
			return GetToken(FlexarParser.DYN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(FlexarParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(FlexarParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callbackContext func_callback() {
			return GetRuleContext<Func_callbackContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 184, RULE_type);
		int _la;
		try {
			int _alt;
			State = 1129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case UINT:
			case UINT8:
			case UINT16:
			case UINT32:
			case UINT64:
			case FLOAT:
			case FLOAT32:
			case FLOAT64:
			case BOOL:
			case CHAR:
			case STRING:
			case INF:
			case TUPLE:
			case MAP:
			case ERROR:
			case NULL:
			case ANY:
			case NAME:
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONST) {
					{
					State = 1102;
					Match(CONST);
					}
				}

				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR) {
					{
					State = 1105;
					Match(STAR);
					}
				}

				State = 1108;
				final_type();
				State = 1125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1123;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
						case 1:
							{
							State = 1109;
							Match(OPEN_BRACKET);
							State = 1111;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 144115188075855889L) != 0)) {
								{
								State = 1110;
								_la = TokenStream.LA(1);
								if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 144115188075855889L) != 0)) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
							}

							State = 1113;
							Match(CLOSE_BRACKET);
							}
							break;
						case 2:
							{
							State = 1114;
							Match(OPEN_BRACKET);
							State = 1115;
							final_type();
							State = 1116;
							Match(OPEN_PAREN);
							State = 1118;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 144115188075855889L) != 0)) {
								{
								State = 1117;
								_la = TokenStream.LA(1);
								if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 144115188075855889L) != 0)) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
							}

							State = 1120;
							Match(CLOSE_PAREN);
							State = 1121;
							Match(CLOSE_BRACKET);
							}
							break;
						}
						} 
					}
					State = 1127;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
				}
				}
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1128;
				func_callback();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Final_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(FlexarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(FlexarParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT16() { return GetToken(FlexarParser.INT16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT32() { return GetToken(FlexarParser.INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(FlexarParser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(FlexarParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT8() { return GetToken(FlexarParser.UINT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT16() { return GetToken(FlexarParser.UINT16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT32() { return GetToken(FlexarParser.UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT64() { return GetToken(FlexarParser.UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(FlexarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT32() { return GetToken(FlexarParser.FLOAT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT64() { return GetToken(FlexarParser.FLOAT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(FlexarParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(FlexarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FlexarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INF() { return GetToken(FlexarParser.INF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE() { return GetToken(FlexarParser.TUPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(FlexarParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(FlexarParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(FlexarParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(FlexarParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FlexarParser.NAME, 0); }
		public Final_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.EnterFinal_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlexarListener typedListener = listener as IFlexarListener;
			if (typedListener != null) typedListener.ExitFinal_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlexarVisitor<TResult> typedVisitor = visitor as IFlexarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinal_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Final_typeContext final_type() {
		Final_typeContext _localctx = new Final_typeContext(Context, State);
		EnterRule(_localctx, 186, RULE_final_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 71303167L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 40: return and_expression_sempred((And_expressionContext)_localctx, predIndex);
		case 41: return or_expression_sempred((Or_expressionContext)_localctx, predIndex);
		case 42: return xor_expression_sempred((Xor_expressionContext)_localctx, predIndex);
		case 44: return expression_math_sempred((Expression_mathContext)_localctx, predIndex);
		case 45: return term_math_sempred((Term_mathContext)_localctx, predIndex);
		case 46: return factor_math_sempred((Factor_mathContext)_localctx, predIndex);
		case 47: return bitwise_math_sempred((Bitwise_mathContext)_localctx, predIndex);
		case 48: return shift_math_sempred((Shift_mathContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 7);
		}
		return true;
	}
	private bool and_expression_sempred(And_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool or_expression_sempred(Or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool xor_expression_sempred(Xor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_math_sempred(Expression_mathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}
	private bool term_math_sempred(Term_mathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool factor_math_sempred(Factor_mathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool bitwise_math_sempred(Bitwise_mathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 2);
		}
		return true;
	}
	private bool shift_math_sempred(Shift_mathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,125,1134,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,1,0,5,0,190,8,0,10,0,12,0,193,9,0,1,0,1,0,5,0,197,
		8,0,10,0,12,0,200,9,0,1,1,3,1,203,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,211,
		8,1,1,2,1,2,1,2,1,3,3,3,217,8,3,1,3,1,3,1,3,3,3,222,8,3,1,3,3,3,225,8,
		3,5,3,227,8,3,10,3,12,3,230,9,3,1,3,1,3,4,3,234,8,3,11,3,12,3,235,1,4,
		1,4,1,4,3,4,241,8,4,1,4,1,4,3,4,245,8,4,1,5,1,5,1,5,5,5,250,8,5,10,5,12,
		5,253,9,5,1,6,1,6,1,6,1,6,1,7,1,7,3,7,261,8,7,1,7,1,7,1,7,3,7,266,8,7,
		1,8,3,8,269,8,8,1,8,1,8,1,8,3,8,274,8,8,1,8,3,8,277,8,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,9,5,9,287,8,9,10,9,12,9,290,9,9,1,9,3,9,293,8,9,1,10,1,
		10,1,10,1,10,1,10,1,10,5,10,301,8,10,10,10,12,10,304,9,10,1,10,3,10,307,
		8,10,1,11,1,11,5,11,311,8,11,10,11,12,11,314,9,11,1,11,1,11,1,12,1,12,
		1,12,3,12,321,8,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,3,15,332,
		8,15,1,16,1,16,1,16,1,16,1,16,3,16,339,8,16,1,16,1,16,3,16,343,8,16,1,
		17,3,17,346,8,17,1,17,3,17,349,8,17,1,17,3,17,352,8,17,1,17,3,17,355,8,
		17,1,17,3,17,358,8,17,1,18,3,18,361,8,18,1,18,1,18,1,18,3,18,366,8,18,
		1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		5,19,382,8,19,10,19,12,19,385,9,19,3,19,387,8,19,1,19,3,19,390,8,19,1,
		20,1,20,3,20,394,8,20,1,20,1,20,1,20,1,21,1,21,3,21,401,8,21,1,21,1,21,
		1,21,5,21,406,8,21,10,21,12,21,409,9,21,1,22,1,22,1,22,3,22,414,8,22,1,
		22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,5,23,424,8,23,10,23,12,23,427,9,
		23,1,23,3,23,430,8,23,1,24,1,24,5,24,434,8,24,10,24,12,24,437,9,24,1,24,
		1,24,1,25,1,25,3,25,443,8,25,1,26,1,26,1,26,1,26,3,26,449,8,26,1,26,1,
		26,3,26,453,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,5,29,
		465,8,29,10,29,12,29,468,9,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,
		1,32,1,32,5,32,480,8,32,10,32,12,32,483,9,32,1,32,1,32,1,33,1,33,1,33,
		3,33,490,8,33,1,34,1,34,1,34,3,34,495,8,34,1,34,1,34,3,34,499,8,34,1,34,
		1,34,1,34,3,34,504,8,34,1,34,1,34,3,34,508,8,34,1,34,1,34,3,34,512,8,34,
		1,34,1,34,1,34,3,34,517,8,34,1,34,1,34,1,34,1,34,3,34,523,8,34,1,34,1,
		34,1,34,1,34,1,34,1,34,3,34,531,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,549,8,34,10,34,12,34,
		552,9,34,1,35,1,35,1,35,1,35,3,35,558,8,35,1,36,1,36,1,36,1,36,5,36,564,
		8,36,10,36,12,36,567,9,36,3,36,569,8,36,1,36,1,36,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,5,37,582,8,37,10,37,12,37,585,9,37,3,37,587,8,
		37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,595,8,38,10,38,12,38,598,9,38,3,
		38,600,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,612,
		8,39,10,39,12,39,615,9,39,3,39,617,8,39,1,39,1,39,1,40,1,40,1,40,1,40,
		1,40,1,40,5,40,627,8,40,10,40,12,40,630,9,40,1,41,1,41,1,41,1,41,1,41,
		1,41,5,41,638,8,41,10,41,12,41,641,9,41,1,42,1,42,1,42,1,42,1,42,1,42,
		5,42,649,8,42,10,42,12,42,652,9,42,1,43,1,43,1,43,3,43,657,8,43,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,5,44,666,8,44,10,44,12,44,669,9,44,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,5,45,678,8,45,10,45,12,45,681,9,45,1,46,1,
		46,1,46,1,46,1,46,1,46,5,46,689,8,46,10,46,12,46,692,9,46,1,47,1,47,1,
		47,1,47,1,47,1,47,1,47,5,47,701,8,47,10,47,12,47,704,9,47,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,5,48,713,8,48,10,48,12,48,716,9,48,1,49,1,49,1,
		49,1,49,3,49,722,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,730,8,50,1,51,
		1,51,1,51,1,51,1,51,1,51,3,51,738,8,51,1,52,1,52,3,52,742,8,52,1,53,1,
		53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,
		59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,772,
		8,60,1,61,1,61,5,61,776,8,61,10,61,12,61,779,9,61,1,61,1,61,1,62,1,62,
		1,62,1,62,1,62,1,62,5,62,789,8,62,10,62,12,62,792,9,62,1,62,1,62,1,63,
		1,63,3,63,798,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,809,
		8,65,1,65,1,65,3,65,813,8,65,1,66,1,66,1,66,1,66,1,66,1,66,5,66,821,8,
		66,10,66,12,66,824,9,66,1,66,1,66,1,67,1,67,1,67,5,67,831,8,67,10,67,12,
		67,834,9,67,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,
		5,68,848,8,68,10,68,12,68,851,9,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,
		859,8,69,10,69,12,69,862,9,69,1,69,1,69,1,69,5,69,867,8,69,10,69,12,69,
		870,9,69,3,69,872,8,69,1,70,1,70,1,70,5,70,877,8,70,10,70,12,70,880,9,
		70,1,70,1,70,3,70,884,8,70,1,70,3,70,887,8,70,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,5,71,897,8,71,10,71,12,71,900,9,71,1,71,1,71,1,72,1,72,
		1,72,5,72,907,8,72,10,72,12,72,910,9,72,1,72,1,72,1,73,1,73,1,73,1,73,
		1,73,1,73,5,73,920,8,73,10,73,12,73,923,9,73,1,73,1,73,5,73,927,8,73,10,
		73,12,73,930,9,73,1,73,3,73,933,8,73,1,74,1,74,1,74,1,74,1,74,1,74,5,74,
		941,8,74,10,74,12,74,944,9,74,1,74,1,74,1,75,1,75,1,75,5,75,951,8,75,10,
		75,12,75,954,9,75,1,75,1,75,1,76,1,76,1,76,3,76,961,8,76,1,76,1,76,1,76,
		1,76,1,77,1,77,1,77,1,77,3,77,971,8,77,1,77,1,77,3,77,975,8,77,1,77,1,
		77,1,78,1,78,1,78,3,78,982,8,78,1,78,1,78,3,78,986,8,78,1,78,1,78,1,78,
		1,79,1,79,1,79,5,79,994,8,79,10,79,12,79,997,9,79,1,80,1,80,1,80,3,80,
		1002,8,80,1,80,1,80,3,80,1006,8,80,1,81,1,81,1,81,5,81,1011,8,81,10,81,
		12,81,1014,9,81,1,82,1,82,3,82,1018,8,82,1,82,1,82,1,82,3,82,1023,8,82,
		1,82,1,82,3,82,1027,8,82,1,83,1,83,1,83,3,83,1032,8,83,1,83,1,83,1,84,
		1,84,1,84,5,84,1039,8,84,10,84,12,84,1042,9,84,1,85,1,85,1,85,1,85,1,85,
		5,85,1049,8,85,10,85,12,85,1052,9,85,1,85,1,85,3,85,1056,8,85,1,86,1,86,
		5,86,1060,8,86,10,86,12,86,1063,9,86,1,86,3,86,1066,8,86,1,86,1,86,1,87,
		1,87,1,87,1,87,5,87,1074,8,87,10,87,12,87,1077,9,87,1,88,1,88,3,88,1081,
		8,88,1,88,1,88,1,88,1,88,1,88,3,88,1088,8,88,1,89,1,89,1,89,1,89,1,90,
		1,90,1,90,1,90,1,90,3,90,1099,8,90,1,91,1,91,1,92,3,92,1104,8,92,1,92,
		3,92,1107,8,92,1,92,1,92,1,92,3,92,1112,8,92,1,92,1,92,1,92,1,92,1,92,
		3,92,1119,8,92,1,92,1,92,1,92,5,92,1124,8,92,10,92,12,92,1127,9,92,1,92,
		3,92,1130,8,92,1,93,1,93,1,93,0,9,68,80,82,84,88,90,92,94,96,94,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,0,12,1,0,16,18,2,0,20,20,22,22,1,0,104,106,
		1,0,108,109,2,0,112,112,114,115,1,0,110,111,1,0,94,99,3,0,6,6,65,66,121,
		122,1,0,67,68,1,0,81,93,3,0,64,64,68,68,121,121,2,0,42,63,68,68,1206,0,
		191,1,0,0,0,2,202,1,0,0,0,4,212,1,0,0,0,6,233,1,0,0,0,8,237,1,0,0,0,10,
		246,1,0,0,0,12,254,1,0,0,0,14,260,1,0,0,0,16,268,1,0,0,0,18,280,1,0,0,
		0,20,294,1,0,0,0,22,308,1,0,0,0,24,320,1,0,0,0,26,322,1,0,0,0,28,325,1,
		0,0,0,30,331,1,0,0,0,32,333,1,0,0,0,34,345,1,0,0,0,36,360,1,0,0,0,38,370,
		1,0,0,0,40,393,1,0,0,0,42,400,1,0,0,0,44,410,1,0,0,0,46,417,1,0,0,0,48,
		431,1,0,0,0,50,442,1,0,0,0,52,444,1,0,0,0,54,454,1,0,0,0,56,458,1,0,0,
		0,58,462,1,0,0,0,60,471,1,0,0,0,62,473,1,0,0,0,64,477,1,0,0,0,66,486,1,
		0,0,0,68,530,1,0,0,0,70,557,1,0,0,0,72,559,1,0,0,0,74,572,1,0,0,0,76,590,
		1,0,0,0,78,603,1,0,0,0,80,620,1,0,0,0,82,631,1,0,0,0,84,642,1,0,0,0,86,
		656,1,0,0,0,88,658,1,0,0,0,90,670,1,0,0,0,92,682,1,0,0,0,94,693,1,0,0,
		0,96,705,1,0,0,0,98,721,1,0,0,0,100,729,1,0,0,0,102,737,1,0,0,0,104,741,
		1,0,0,0,106,743,1,0,0,0,108,747,1,0,0,0,110,749,1,0,0,0,112,751,1,0,0,
		0,114,753,1,0,0,0,116,755,1,0,0,0,118,757,1,0,0,0,120,771,1,0,0,0,122,
		773,1,0,0,0,124,782,1,0,0,0,126,797,1,0,0,0,128,799,1,0,0,0,130,805,1,
		0,0,0,132,814,1,0,0,0,134,827,1,0,0,0,136,841,1,0,0,0,138,871,1,0,0,0,
		140,873,1,0,0,0,142,888,1,0,0,0,144,903,1,0,0,0,146,913,1,0,0,0,148,934,
		1,0,0,0,150,947,1,0,0,0,152,957,1,0,0,0,154,966,1,0,0,0,156,978,1,0,0,
		0,158,990,1,0,0,0,160,998,1,0,0,0,162,1007,1,0,0,0,164,1015,1,0,0,0,166,
		1028,1,0,0,0,168,1035,1,0,0,0,170,1055,1,0,0,0,172,1057,1,0,0,0,174,1069,
		1,0,0,0,176,1078,1,0,0,0,178,1089,1,0,0,0,180,1098,1,0,0,0,182,1100,1,
		0,0,0,184,1129,1,0,0,0,186,1131,1,0,0,0,188,190,3,4,2,0,189,188,1,0,0,
		0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,
		191,1,0,0,0,194,198,3,12,6,0,195,197,3,2,1,0,196,195,1,0,0,0,197,200,1,
		0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,1,1,0,0,0,200,198,1,0,0,0,201,
		203,5,3,0,0,202,201,1,0,0,0,202,203,1,0,0,0,203,210,1,0,0,0,204,211,3,
		16,8,0,205,211,3,154,77,0,206,211,3,44,22,0,207,211,3,56,28,0,208,211,
		3,152,76,0,209,211,3,62,31,0,210,204,1,0,0,0,210,205,1,0,0,0,210,206,1,
		0,0,0,210,207,1,0,0,0,210,208,1,0,0,0,210,209,1,0,0,0,211,3,1,0,0,0,212,
		213,5,1,0,0,213,214,3,6,3,0,214,5,1,0,0,0,215,217,5,4,0,0,216,215,1,0,
		0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,228,3,8,4,0,219,221,5,69,0,0,220,
		222,5,4,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,225,3,
		8,4,0,224,223,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,219,1,0,0,0,
		227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,230,228,
		1,0,0,0,231,232,5,74,0,0,232,234,1,0,0,0,233,216,1,0,0,0,234,235,1,0,0,
		0,235,233,1,0,0,0,235,236,1,0,0,0,236,7,1,0,0,0,237,240,3,10,5,0,238,239,
		5,72,0,0,239,241,5,68,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,244,1,0,
		0,0,242,243,5,5,0,0,243,245,5,68,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,
		9,1,0,0,0,246,251,5,68,0,0,247,248,5,70,0,0,248,250,5,68,0,0,249,247,1,
		0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,11,1,0,0,0,253,
		251,1,0,0,0,254,255,5,2,0,0,255,256,3,10,5,0,256,257,5,74,0,0,257,13,1,
		0,0,0,258,261,3,10,5,0,259,261,5,68,0,0,260,258,1,0,0,0,260,259,1,0,0,
		0,261,262,1,0,0,0,262,265,5,72,0,0,263,266,3,166,83,0,264,266,5,68,0,0,
		265,263,1,0,0,0,265,264,1,0,0,0,266,15,1,0,0,0,267,269,5,20,0,0,268,267,
		1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,12,0,0,271,273,5,68,
		0,0,272,274,3,18,9,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,
		277,3,20,10,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,
		3,22,11,0,279,17,1,0,0,0,280,292,5,14,0,0,281,293,5,68,0,0,282,283,5,75,
		0,0,283,288,5,68,0,0,284,285,5,69,0,0,285,287,5,68,0,0,286,284,1,0,0,0,
		287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,
		1,0,0,0,291,293,5,76,0,0,292,281,1,0,0,0,292,282,1,0,0,0,293,19,1,0,0,
		0,294,306,5,15,0,0,295,307,5,68,0,0,296,297,5,75,0,0,297,302,5,68,0,0,
		298,299,5,69,0,0,299,301,5,68,0,0,300,298,1,0,0,0,301,304,1,0,0,0,302,
		300,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,307,5,
		76,0,0,306,295,1,0,0,0,306,296,1,0,0,0,307,21,1,0,0,0,308,312,5,77,0,0,
		309,311,3,24,12,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,
		313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,316,5,78,0,0,316,23,1,
		0,0,0,317,321,3,26,13,0,318,321,3,36,18,0,319,321,3,30,15,0,320,317,1,
		0,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,25,1,0,0,0,322,323,3,34,17,0,
		323,324,3,176,88,0,324,27,1,0,0,0,325,326,7,0,0,0,326,29,1,0,0,0,327,328,
		3,34,17,0,328,329,3,154,77,0,329,332,1,0,0,0,330,332,3,32,16,0,331,327,
		1,0,0,0,331,330,1,0,0,0,332,31,1,0,0,0,333,334,5,20,0,0,334,335,5,11,0,
		0,335,336,5,68,0,0,336,338,5,75,0,0,337,339,3,158,79,0,338,337,1,0,0,0,
		338,339,1,0,0,0,339,340,1,0,0,0,340,342,5,76,0,0,341,343,3,170,85,0,342,
		341,1,0,0,0,342,343,1,0,0,0,343,33,1,0,0,0,344,346,7,1,0,0,345,344,1,0,
		0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,349,5,36,0,0,348,347,1,0,0,0,348,
		349,1,0,0,0,349,351,1,0,0,0,350,352,3,28,14,0,351,350,1,0,0,0,351,352,
		1,0,0,0,352,354,1,0,0,0,353,355,5,19,0,0,354,353,1,0,0,0,354,355,1,0,0,
		0,355,357,1,0,0,0,356,358,5,21,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,
		35,1,0,0,0,359,361,3,28,14,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,
		0,0,0,362,363,5,68,0,0,363,365,5,75,0,0,364,366,3,158,79,0,365,364,1,0,
		0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,368,5,76,0,0,368,369,3,172,86,
		0,369,37,1,0,0,0,370,389,5,8,0,0,371,390,3,166,83,0,372,373,5,68,0,0,373,
		386,5,77,0,0,374,375,5,68,0,0,375,376,5,81,0,0,376,383,3,68,34,0,377,378,
		5,69,0,0,378,379,5,68,0,0,379,380,5,81,0,0,380,382,3,68,34,0,381,377,1,
		0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,387,1,0,0,0,
		385,383,1,0,0,0,386,374,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,390,
		5,78,0,0,389,371,1,0,0,0,389,372,1,0,0,0,390,39,1,0,0,0,391,394,5,7,0,
		0,392,394,3,180,90,0,393,391,1,0,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,
		396,5,70,0,0,396,397,3,166,83,0,397,41,1,0,0,0,398,401,5,68,0,0,399,401,
		3,166,83,0,400,398,1,0,0,0,400,399,1,0,0,0,401,407,1,0,0,0,402,403,5,70,
		0,0,403,406,5,68,0,0,404,406,3,166,83,0,405,402,1,0,0,0,405,404,1,0,0,
		0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,43,1,0,0,0,409,407,
		1,0,0,0,410,411,5,13,0,0,411,413,5,68,0,0,412,414,3,46,23,0,413,412,1,
		0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,3,48,24,0,416,45,1,0,0,0,
		417,429,5,14,0,0,418,430,5,68,0,0,419,420,5,75,0,0,420,425,5,68,0,0,421,
		422,5,69,0,0,422,424,5,68,0,0,423,421,1,0,0,0,424,427,1,0,0,0,425,423,
		1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,430,5,76,0,
		0,429,418,1,0,0,0,429,419,1,0,0,0,430,47,1,0,0,0,431,435,5,77,0,0,432,
		434,3,50,25,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,
		1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,439,5,78,0,0,439,49,1,0,0,
		0,440,443,3,52,26,0,441,443,3,54,27,0,442,440,1,0,0,0,442,441,1,0,0,0,
		443,51,1,0,0,0,444,445,5,11,0,0,445,446,5,68,0,0,446,448,5,75,0,0,447,
		449,3,158,79,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,452,
		5,76,0,0,451,453,3,170,85,0,452,451,1,0,0,0,452,453,1,0,0,0,453,53,1,0,
		0,0,454,455,5,68,0,0,455,456,5,71,0,0,456,457,3,184,92,0,457,55,1,0,0,
		0,458,459,5,10,0,0,459,460,5,68,0,0,460,461,3,58,29,0,461,57,1,0,0,0,462,
		466,5,77,0,0,463,465,3,60,30,0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,
		1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,78,0,
		0,470,59,1,0,0,0,471,472,3,176,88,0,472,61,1,0,0,0,473,474,5,9,0,0,474,
		475,5,68,0,0,475,476,3,64,32,0,476,63,1,0,0,0,477,481,5,77,0,0,478,480,
		3,66,33,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,
		0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,5,78,0,0,485,65,1,0,0,0,486,
		489,5,68,0,0,487,488,5,81,0,0,488,490,5,121,0,0,489,487,1,0,0,0,489,490,
		1,0,0,0,490,67,1,0,0,0,491,492,6,34,-1,0,492,531,3,38,19,0,493,495,5,125,
		0,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,531,3,166,83,0,
		497,499,5,125,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,
		531,3,156,78,0,501,531,3,118,59,0,502,504,5,125,0,0,503,502,1,0,0,0,503,
		504,1,0,0,0,504,505,1,0,0,0,505,531,3,40,20,0,506,508,5,125,0,0,507,506,
		1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,531,3,14,7,0,510,512,5,125,
		0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,531,3,42,21,0,
		514,531,3,88,44,0,515,517,5,125,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,
		518,1,0,0,0,518,531,3,70,35,0,519,531,3,80,40,0,520,523,3,184,92,0,521,
		523,5,68,0,0,522,520,1,0,0,0,522,521,1,0,0,0,523,524,1,0,0,0,524,525,5,
		75,0,0,525,526,3,68,34,0,526,527,5,76,0,0,527,531,1,0,0,0,528,531,5,68,
		0,0,529,531,5,62,0,0,530,491,1,0,0,0,530,494,1,0,0,0,530,498,1,0,0,0,530,
		501,1,0,0,0,530,503,1,0,0,0,530,507,1,0,0,0,530,511,1,0,0,0,530,514,1,
		0,0,0,530,516,1,0,0,0,530,519,1,0,0,0,530,522,1,0,0,0,530,528,1,0,0,0,
		530,529,1,0,0,0,531,550,1,0,0,0,532,533,10,6,0,0,533,534,3,116,58,0,534,
		535,3,68,34,7,535,549,1,0,0,0,536,537,10,5,0,0,537,538,5,118,0,0,538,539,
		3,68,34,0,539,540,5,71,0,0,540,541,3,68,34,6,541,549,1,0,0,0,542,543,10,
		4,0,0,543,544,5,119,0,0,544,549,3,68,34,5,545,546,10,7,0,0,546,547,5,38,
		0,0,547,549,3,184,92,0,548,532,1,0,0,0,548,536,1,0,0,0,548,542,1,0,0,0,
		548,545,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,69,
		1,0,0,0,552,550,1,0,0,0,553,558,3,72,36,0,554,558,3,74,37,0,555,558,3,
		76,38,0,556,558,3,78,39,0,557,553,1,0,0,0,557,554,1,0,0,0,557,555,1,0,
		0,0,557,556,1,0,0,0,558,71,1,0,0,0,559,568,5,77,0,0,560,565,3,68,34,0,
		561,562,5,69,0,0,562,564,3,68,34,0,563,561,1,0,0,0,564,567,1,0,0,0,565,
		563,1,0,0,0,565,566,1,0,0,0,566,569,1,0,0,0,567,565,1,0,0,0,568,560,1,
		0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,5,78,0,0,571,73,1,0,0,0,
		572,586,5,77,0,0,573,574,3,68,34,0,574,575,5,71,0,0,575,583,3,68,34,0,
		576,577,5,69,0,0,577,578,3,68,34,0,578,579,5,71,0,0,579,580,3,68,34,0,
		580,582,1,0,0,0,581,576,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,
		1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,586,573,1,0,0,0,586,587,1,0,0,
		0,587,588,1,0,0,0,588,589,5,78,0,0,589,75,1,0,0,0,590,599,5,75,0,0,591,
		596,3,68,34,0,592,593,5,69,0,0,593,595,3,68,34,0,594,592,1,0,0,0,595,598,
		1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,
		0,599,591,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,5,76,0,0,602,
		77,1,0,0,0,603,616,5,75,0,0,604,605,5,68,0,0,605,606,5,71,0,0,606,613,
		3,68,34,0,607,608,5,69,0,0,608,609,5,68,0,0,609,610,5,71,0,0,610,612,3,
		68,34,0,611,607,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,
		0,614,617,1,0,0,0,615,613,1,0,0,0,616,604,1,0,0,0,616,617,1,0,0,0,617,
		618,1,0,0,0,618,619,5,76,0,0,619,79,1,0,0,0,620,621,6,40,-1,0,621,622,
		3,82,41,0,622,628,1,0,0,0,623,624,10,2,0,0,624,625,5,100,0,0,625,627,3,
		82,41,0,626,623,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,
		0,629,81,1,0,0,0,630,628,1,0,0,0,631,632,6,41,-1,0,632,633,3,84,42,0,633,
		639,1,0,0,0,634,635,10,2,0,0,635,636,5,101,0,0,636,638,3,84,42,0,637,634,
		1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,83,1,0,0,0,
		641,639,1,0,0,0,642,643,6,42,-1,0,643,644,3,86,43,0,644,650,1,0,0,0,645,
		646,10,2,0,0,646,647,5,102,0,0,647,649,3,86,43,0,648,645,1,0,0,0,649,652,
		1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,85,1,0,0,0,652,650,1,0,0,0,
		653,654,5,103,0,0,654,657,3,86,43,0,655,657,5,6,0,0,656,653,1,0,0,0,656,
		655,1,0,0,0,657,87,1,0,0,0,658,659,6,44,-1,0,659,660,3,90,45,0,660,667,
		1,0,0,0,661,662,10,2,0,0,662,663,3,114,57,0,663,664,3,90,45,0,664,666,
		1,0,0,0,665,661,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,
		0,668,89,1,0,0,0,669,667,1,0,0,0,670,671,6,45,-1,0,671,672,3,92,46,0,672,
		679,1,0,0,0,673,674,10,2,0,0,674,675,3,112,56,0,675,676,3,92,46,0,676,
		678,1,0,0,0,677,673,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,1,
		0,0,0,680,91,1,0,0,0,681,679,1,0,0,0,682,683,6,46,-1,0,683,684,3,94,47,
		0,684,690,1,0,0,0,685,686,10,2,0,0,686,687,5,113,0,0,687,689,3,94,47,0,
		688,685,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,93,
		1,0,0,0,692,690,1,0,0,0,693,694,6,47,-1,0,694,695,3,96,48,0,695,702,1,
		0,0,0,696,697,10,2,0,0,697,698,3,108,54,0,698,699,3,96,48,0,699,701,1,
		0,0,0,700,696,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,
		703,95,1,0,0,0,704,702,1,0,0,0,705,706,6,48,-1,0,706,707,3,98,49,0,707,
		714,1,0,0,0,708,709,10,2,0,0,709,710,3,110,55,0,710,711,3,98,49,0,711,
		713,1,0,0,0,712,708,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,
		0,0,0,715,97,1,0,0,0,716,714,1,0,0,0,717,722,3,100,50,0,718,722,3,102,
		51,0,719,722,3,104,52,0,720,722,3,106,53,0,721,717,1,0,0,0,721,718,1,0,
		0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,99,1,0,0,0,723,724,5,116,0,0,724,
		730,3,104,52,0,725,726,5,117,0,0,726,730,3,104,52,0,727,728,5,107,0,0,
		728,730,3,104,52,0,729,723,1,0,0,0,729,725,1,0,0,0,729,727,1,0,0,0,730,
		101,1,0,0,0,731,732,3,104,52,0,732,733,5,116,0,0,733,738,1,0,0,0,734,735,
		3,104,52,0,735,736,5,117,0,0,736,738,1,0,0,0,737,731,1,0,0,0,737,734,1,
		0,0,0,738,103,1,0,0,0,739,742,3,180,90,0,740,742,5,121,0,0,741,739,1,0,
		0,0,741,740,1,0,0,0,742,105,1,0,0,0,743,744,5,75,0,0,744,745,3,88,44,0,
		745,746,5,76,0,0,746,107,1,0,0,0,747,748,7,2,0,0,748,109,1,0,0,0,749,750,
		7,3,0,0,750,111,1,0,0,0,751,752,7,4,0,0,752,113,1,0,0,0,753,754,7,5,0,
		0,754,115,1,0,0,0,755,756,7,6,0,0,756,117,1,0,0,0,757,758,7,7,0,0,758,
		119,1,0,0,0,759,772,3,176,88,0,760,772,3,178,89,0,761,772,3,68,34,0,762,
		772,3,124,62,0,763,772,3,146,73,0,764,772,3,132,66,0,765,772,3,134,67,
		0,766,772,3,136,68,0,767,772,3,140,70,0,768,772,3,122,61,0,769,772,5,32,
		0,0,770,772,5,33,0,0,771,759,1,0,0,0,771,760,1,0,0,0,771,761,1,0,0,0,771,
		762,1,0,0,0,771,763,1,0,0,0,771,764,1,0,0,0,771,765,1,0,0,0,771,766,1,
		0,0,0,771,767,1,0,0,0,771,768,1,0,0,0,771,769,1,0,0,0,771,770,1,0,0,0,
		772,121,1,0,0,0,773,777,5,77,0,0,774,776,3,120,60,0,775,774,1,0,0,0,776,
		779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,
		0,0,0,780,781,5,78,0,0,781,123,1,0,0,0,782,783,5,31,0,0,783,784,5,75,0,
		0,784,785,3,126,63,0,785,786,5,76,0,0,786,790,5,77,0,0,787,789,3,120,60,
		0,788,787,1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,
		793,1,0,0,0,792,790,1,0,0,0,793,794,5,78,0,0,794,125,1,0,0,0,795,798,3,
		128,64,0,796,798,3,130,65,0,797,795,1,0,0,0,797,796,1,0,0,0,798,127,1,
		0,0,0,799,800,7,8,0,0,800,801,5,69,0,0,801,802,7,8,0,0,802,803,5,37,0,
		0,803,804,3,68,34,0,804,129,1,0,0,0,805,806,3,176,88,0,806,808,5,74,0,
		0,807,809,3,68,34,0,808,807,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,
		812,5,74,0,0,811,813,3,68,34,0,812,811,1,0,0,0,812,813,1,0,0,0,813,131,
		1,0,0,0,814,815,5,29,0,0,815,816,5,75,0,0,816,817,3,68,34,0,817,818,5,
		76,0,0,818,822,5,77,0,0,819,821,3,120,60,0,820,819,1,0,0,0,821,824,1,0,
		0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,822,1,0,0,0,825,
		826,5,78,0,0,826,133,1,0,0,0,827,828,5,30,0,0,828,832,5,77,0,0,829,831,
		3,120,60,0,830,829,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,1,0,
		0,0,833,835,1,0,0,0,834,832,1,0,0,0,835,836,5,78,0,0,836,837,5,29,0,0,
		837,838,5,75,0,0,838,839,3,68,34,0,839,840,5,76,0,0,840,135,1,0,0,0,841,
		842,5,26,0,0,842,843,5,75,0,0,843,844,3,68,34,0,844,845,5,76,0,0,845,849,
		5,77,0,0,846,848,3,138,69,0,847,846,1,0,0,0,848,851,1,0,0,0,849,847,1,
		0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,853,5,78,0,0,
		853,137,1,0,0,0,854,855,5,27,0,0,855,856,3,68,34,0,856,860,5,71,0,0,857,
		859,3,120,60,0,858,857,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,
		1,0,0,0,861,872,1,0,0,0,862,860,1,0,0,0,863,864,5,28,0,0,864,868,5,71,
		0,0,865,867,3,120,60,0,866,865,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,
		868,869,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,871,854,1,0,0,0,871,863,
		1,0,0,0,872,139,1,0,0,0,873,874,5,39,0,0,874,878,5,77,0,0,875,877,3,120,
		60,0,876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,
		881,1,0,0,0,880,878,1,0,0,0,881,883,5,78,0,0,882,884,3,142,71,0,883,882,
		1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,887,3,144,72,0,886,885,1,0,
		0,0,886,887,1,0,0,0,887,141,1,0,0,0,888,889,5,40,0,0,889,890,5,75,0,0,
		890,891,5,68,0,0,891,892,5,71,0,0,892,893,5,68,0,0,893,894,5,76,0,0,894,
		898,5,77,0,0,895,897,3,120,60,0,896,895,1,0,0,0,897,900,1,0,0,0,898,896,
		1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,898,1,0,0,0,901,902,5,78,0,
		0,902,143,1,0,0,0,903,904,5,41,0,0,904,908,5,77,0,0,905,907,3,120,60,0,
		906,905,1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,911,
		1,0,0,0,910,908,1,0,0,0,911,912,5,78,0,0,912,145,1,0,0,0,913,914,5,23,
		0,0,914,915,5,75,0,0,915,916,3,68,34,0,916,917,5,76,0,0,917,921,5,77,0,
		0,918,920,3,120,60,0,919,918,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,
		922,1,0,0,0,922,924,1,0,0,0,923,921,1,0,0,0,924,928,5,78,0,0,925,927,3,
		148,74,0,926,925,1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,
		0,929,932,1,0,0,0,930,928,1,0,0,0,931,933,3,150,75,0,932,931,1,0,0,0,932,
		933,1,0,0,0,933,147,1,0,0,0,934,935,5,25,0,0,935,936,5,75,0,0,936,937,
		3,68,34,0,937,938,5,76,0,0,938,942,5,77,0,0,939,941,3,120,60,0,940,939,
		1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,
		0,944,942,1,0,0,0,945,946,5,78,0,0,946,149,1,0,0,0,947,948,5,24,0,0,948,
		952,5,77,0,0,949,951,3,120,60,0,950,949,1,0,0,0,951,954,1,0,0,0,952,950,
		1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,952,1,0,0,0,955,956,5,78,0,
		0,956,151,1,0,0,0,957,958,5,75,0,0,958,960,5,68,0,0,959,961,5,112,0,0,
		960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,963,5,68,0,0,963,964,
		5,76,0,0,964,965,3,154,77,0,965,153,1,0,0,0,966,967,5,11,0,0,967,968,5,
		68,0,0,968,970,5,75,0,0,969,971,3,158,79,0,970,969,1,0,0,0,970,971,1,0,
		0,0,971,972,1,0,0,0,972,974,5,76,0,0,973,975,3,170,85,0,974,973,1,0,0,
		0,974,975,1,0,0,0,975,976,1,0,0,0,976,977,3,172,86,0,977,155,1,0,0,0,978,
		979,5,11,0,0,979,981,5,75,0,0,980,982,3,158,79,0,981,980,1,0,0,0,981,982,
		1,0,0,0,982,983,1,0,0,0,983,985,5,76,0,0,984,986,3,170,85,0,985,984,1,
		0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,5,73,0,0,988,989,3,172,86,
		0,989,157,1,0,0,0,990,995,3,164,82,0,991,992,5,69,0,0,992,994,3,164,82,
		0,993,991,1,0,0,0,994,997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,
		159,1,0,0,0,997,995,1,0,0,0,998,999,5,11,0,0,999,1001,5,75,0,0,1000,1002,
		3,162,81,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,
		1005,5,76,0,0,1004,1006,3,170,85,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,
		1006,161,1,0,0,0,1007,1012,3,184,92,0,1008,1009,5,69,0,0,1009,1011,3,184,
		92,0,1010,1008,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,
		0,0,0,1013,163,1,0,0,0,1014,1012,1,0,0,0,1015,1017,5,68,0,0,1016,1018,
		5,118,0,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,
		5,71,0,0,1020,1022,3,184,92,0,1021,1023,5,120,0,0,1022,1021,1,0,0,0,1022,
		1023,1,0,0,0,1023,1026,1,0,0,0,1024,1025,5,81,0,0,1025,1027,3,118,59,0,
		1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,165,1,0,0,0,1028,1029,5,68,0,
		0,1029,1031,5,75,0,0,1030,1032,3,168,84,0,1031,1030,1,0,0,0,1031,1032,
		1,0,0,0,1032,1033,1,0,0,0,1033,1034,5,76,0,0,1034,167,1,0,0,0,1035,1040,
		3,68,34,0,1036,1037,5,69,0,0,1037,1039,3,68,34,0,1038,1036,1,0,0,0,1039,
		1042,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,169,1,0,0,0,1042,
		1040,1,0,0,0,1043,1056,3,184,92,0,1044,1045,5,75,0,0,1045,1050,3,184,92,
		0,1046,1047,5,69,0,0,1047,1049,3,184,92,0,1048,1046,1,0,0,0,1049,1052,
		1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,1050,
		1,0,0,0,1053,1054,5,76,0,0,1054,1056,1,0,0,0,1055,1043,1,0,0,0,1055,1044,
		1,0,0,0,1056,171,1,0,0,0,1057,1061,5,77,0,0,1058,1060,3,120,60,0,1059,
		1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,
		1065,1,0,0,0,1063,1061,1,0,0,0,1064,1066,3,174,87,0,1065,1064,1,0,0,0,
		1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1068,5,78,0,0,1068,173,1,0,0,
		0,1069,1070,5,34,0,0,1070,1075,3,68,34,0,1071,1072,5,69,0,0,1072,1074,
		3,68,34,0,1073,1071,1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,1075,1076,
		1,0,0,0,1076,175,1,0,0,0,1077,1075,1,0,0,0,1078,1080,5,68,0,0,1079,1081,
		5,118,0,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1083,
		5,71,0,0,1083,1084,3,184,92,0,1084,1087,1,0,0,0,1085,1086,5,81,0,0,1086,
		1088,3,68,34,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,177,1,0,0,0,1089,
		1090,3,180,90,0,1090,1091,3,182,91,0,1091,1092,3,68,34,0,1092,179,1,0,
		0,0,1093,1099,5,68,0,0,1094,1095,5,7,0,0,1095,1096,5,70,0,0,1096,1099,
		5,68,0,0,1097,1099,5,67,0,0,1098,1093,1,0,0,0,1098,1094,1,0,0,0,1098,1097,
		1,0,0,0,1099,181,1,0,0,0,1100,1101,7,9,0,0,1101,183,1,0,0,0,1102,1104,
		5,35,0,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1106,1,0,0,0,1105,1107,
		5,112,0,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1125,
		3,186,93,0,1109,1111,5,79,0,0,1110,1112,7,10,0,0,1111,1110,1,0,0,0,1111,
		1112,1,0,0,0,1112,1113,1,0,0,0,1113,1124,5,80,0,0,1114,1115,5,79,0,0,1115,
		1116,3,186,93,0,1116,1118,5,75,0,0,1117,1119,7,10,0,0,1118,1117,1,0,0,
		0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,5,76,0,0,1121,1122,5,80,
		0,0,1122,1124,1,0,0,0,1123,1109,1,0,0,0,1123,1114,1,0,0,0,1124,1127,1,
		0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1130,1,0,0,0,1127,1125,
		1,0,0,0,1128,1130,3,160,80,0,1129,1103,1,0,0,0,1129,1128,1,0,0,0,1130,
		185,1,0,0,0,1131,1132,7,11,0,0,1132,187,1,0,0,0,133,191,198,202,210,216,
		221,224,228,235,240,244,251,260,265,268,273,276,288,292,302,306,312,320,
		331,338,342,345,348,351,354,357,360,365,383,386,389,393,400,405,407,413,
		425,429,435,442,448,452,466,481,489,494,498,503,507,511,516,522,530,548,
		550,557,565,568,583,586,596,599,613,616,628,639,650,656,667,679,690,702,
		714,721,729,737,741,771,777,790,797,808,812,822,832,849,860,868,871,878,
		883,886,898,908,921,928,932,942,952,960,970,974,981,985,995,1001,1005,
		1012,1017,1022,1026,1031,1040,1050,1055,1061,1065,1075,1080,1087,1098,
		1103,1106,1111,1118,1123,1125,1129
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
