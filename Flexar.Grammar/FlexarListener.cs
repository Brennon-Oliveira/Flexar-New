//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Flexar.Grammar/Flexar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="FlexarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IFlexarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] FlexarParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] FlexarParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.program_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram_rule([NotNull] FlexarParser.Program_ruleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.program_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram_rule([NotNull] FlexarParser.Program_ruleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.import_group"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImport_group([NotNull] FlexarParser.Import_groupContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.import_group"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImport_group([NotNull] FlexarParser.Import_groupContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.import_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImport_rule([NotNull] FlexarParser.Import_ruleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.import_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImport_rule([NotNull] FlexarParser.Import_ruleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.import_namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImport_namespace([NotNull] FlexarParser.Import_namespaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.import_namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImport_namespace([NotNull] FlexarParser.Import_namespaceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.namespace_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace_name([NotNull] FlexarParser.Namespace_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.namespace_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace_name([NotNull] FlexarParser.Namespace_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace([NotNull] FlexarParser.NamespaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace([NotNull] FlexarParser.NamespaceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.namespace_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace_call([NotNull] FlexarParser.Namespace_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.namespace_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace_call([NotNull] FlexarParser.Namespace_callContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass([NotNull] FlexarParser.ClassContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass([NotNull] FlexarParser.ClassContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_extends"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_extends([NotNull] FlexarParser.Class_extendsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_extends"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_extends([NotNull] FlexarParser.Class_extendsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_implements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_implements([NotNull] FlexarParser.Class_implementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_implements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_implements([NotNull] FlexarParser.Class_implementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_body([NotNull] FlexarParser.Class_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_body([NotNull] FlexarParser.Class_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_body_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_body_rule([NotNull] FlexarParser.Class_body_ruleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_body_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_body_rule([NotNull] FlexarParser.Class_body_ruleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_attribute([NotNull] FlexarParser.Class_attributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_attribute([NotNull] FlexarParser.Class_attributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.privacy_modifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrivacy_modifier([NotNull] FlexarParser.Privacy_modifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.privacy_modifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrivacy_modifier([NotNull] FlexarParser.Privacy_modifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_method([NotNull] FlexarParser.Class_methodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_method([NotNull] FlexarParser.Class_methodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.abstract_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstract_method([NotNull] FlexarParser.Abstract_methodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.abstract_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstract_method([NotNull] FlexarParser.Abstract_methodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_modifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_modifier([NotNull] FlexarParser.Class_modifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_modifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_modifier([NotNull] FlexarParser.Class_modifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructor([NotNull] FlexarParser.ConstructorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructor([NotNull] FlexarParser.ConstructorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.class_new_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_new_instance([NotNull] FlexarParser.Class_new_instanceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.class_new_instance"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_new_instance([NotNull] FlexarParser.Class_new_instanceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_call([NotNull] FlexarParser.Method_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.method_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_call([NotNull] FlexarParser.Method_callContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.attribute_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_call([NotNull] FlexarParser.Attribute_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.attribute_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_call([NotNull] FlexarParser.Attribute_callContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.interface"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterface([NotNull] FlexarParser.InterfaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.interface"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterface([NotNull] FlexarParser.InterfaceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.interface_extends"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterface_extends([NotNull] FlexarParser.Interface_extendsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.interface_extends"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterface_extends([NotNull] FlexarParser.Interface_extendsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.interface_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterface_body([NotNull] FlexarParser.Interface_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.interface_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterface_body([NotNull] FlexarParser.Interface_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.interface_body_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterface_body_rule([NotNull] FlexarParser.Interface_body_ruleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.interface_body_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterface_body_rule([NotNull] FlexarParser.Interface_body_ruleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.interface_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterface_method([NotNull] FlexarParser.Interface_methodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.interface_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterface_method([NotNull] FlexarParser.Interface_methodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.interface_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterface_attribute([NotNull] FlexarParser.Interface_attributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.interface_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterface_attribute([NotNull] FlexarParser.Interface_attributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.struct"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct([NotNull] FlexarParser.StructContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.struct"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct([NotNull] FlexarParser.StructContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.struct_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct_body([NotNull] FlexarParser.Struct_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.struct_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct_body([NotNull] FlexarParser.Struct_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.struct_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct_attribute([NotNull] FlexarParser.Struct_attributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.struct_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct_attribute([NotNull] FlexarParser.Struct_attributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.enum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum([NotNull] FlexarParser.EnumContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.enum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum([NotNull] FlexarParser.EnumContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.enum_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_body([NotNull] FlexarParser.Enum_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.enum_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_body([NotNull] FlexarParser.Enum_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.enum_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnum_attribute([NotNull] FlexarParser.Enum_attributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.enum_attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnum_attribute([NotNull] FlexarParser.Enum_attributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] FlexarParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] FlexarParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.composed_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComposed_value([NotNull] FlexarParser.Composed_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.composed_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComposed_value([NotNull] FlexarParser.Composed_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.list_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList_value([NotNull] FlexarParser.List_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.list_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList_value([NotNull] FlexarParser.List_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.map_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMap_value([NotNull] FlexarParser.Map_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.map_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMap_value([NotNull] FlexarParser.Map_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.tuple_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_value([NotNull] FlexarParser.Tuple_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.tuple_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_value([NotNull] FlexarParser.Tuple_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.named_tuple_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamed_tuple_value([NotNull] FlexarParser.Named_tuple_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.named_tuple_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamed_tuple_value([NotNull] FlexarParser.Named_tuple_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd_expression([NotNull] FlexarParser.And_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd_expression([NotNull] FlexarParser.And_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr_expression([NotNull] FlexarParser.Or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr_expression([NotNull] FlexarParser.Or_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.xor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterXor_expression([NotNull] FlexarParser.Xor_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.xor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitXor_expression([NotNull] FlexarParser.Xor_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.not_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot_expression([NotNull] FlexarParser.Not_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.not_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot_expression([NotNull] FlexarParser.Not_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.expression_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_math([NotNull] FlexarParser.Expression_mathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.expression_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_math([NotNull] FlexarParser.Expression_mathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.term_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm_math([NotNull] FlexarParser.Term_mathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.term_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm_math([NotNull] FlexarParser.Term_mathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.factor_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor_math([NotNull] FlexarParser.Factor_mathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.factor_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor_math([NotNull] FlexarParser.Factor_mathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.bitwise_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwise_math([NotNull] FlexarParser.Bitwise_mathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.bitwise_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwise_math([NotNull] FlexarParser.Bitwise_mathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.shift_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShift_math([NotNull] FlexarParser.Shift_mathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.shift_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShift_math([NotNull] FlexarParser.Shift_mathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.unary_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_math([NotNull] FlexarParser.Unary_mathContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.unary_math"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_math([NotNull] FlexarParser.Unary_mathContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.before_unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBefore_unary([NotNull] FlexarParser.Before_unaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.before_unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBefore_unary([NotNull] FlexarParser.Before_unaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.after_unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAfter_unary([NotNull] FlexarParser.After_unaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.after_unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAfter_unary([NotNull] FlexarParser.After_unaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.math_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMath_value([NotNull] FlexarParser.Math_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.math_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMath_value([NotNull] FlexarParser.Math_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis_expression([NotNull] FlexarParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.parenthesis_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis_expression([NotNull] FlexarParser.Parenthesis_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.bitwise_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwise_operator([NotNull] FlexarParser.Bitwise_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.bitwise_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwise_operator([NotNull] FlexarParser.Bitwise_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.shift_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShift_operator([NotNull] FlexarParser.Shift_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.shift_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShift_operator([NotNull] FlexarParser.Shift_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.term_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm_operator([NotNull] FlexarParser.Term_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.term_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm_operator([NotNull] FlexarParser.Term_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.factor_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor_operator([NotNull] FlexarParser.Factor_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.factor_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor_operator([NotNull] FlexarParser.Factor_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.comparision_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparision_operator([NotNull] FlexarParser.Comparision_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.comparision_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparision_operator([NotNull] FlexarParser.Comparision_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] FlexarParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] FlexarParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] FlexarParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] FlexarParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.new_scope"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNew_scope([NotNull] FlexarParser.New_scopeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.new_scope"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNew_scope([NotNull] FlexarParser.New_scopeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_statement([NotNull] FlexarParser.For_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_statement([NotNull] FlexarParser.For_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.for_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_rule([NotNull] FlexarParser.For_ruleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.for_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_rule([NotNull] FlexarParser.For_ruleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.for_in"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_in([NotNull] FlexarParser.For_inContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.for_in"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_in([NotNull] FlexarParser.For_inContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.full_for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFull_for([NotNull] FlexarParser.Full_forContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.full_for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFull_for([NotNull] FlexarParser.Full_forContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile_statement([NotNull] FlexarParser.While_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile_statement([NotNull] FlexarParser.While_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while_statement([NotNull] FlexarParser.Do_while_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while_statement([NotNull] FlexarParser.Do_while_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_statement([NotNull] FlexarParser.Switch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_statement([NotNull] FlexarParser.Switch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.switch_case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_case([NotNull] FlexarParser.Switch_caseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.switch_case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_case([NotNull] FlexarParser.Switch_caseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTry_statement([NotNull] FlexarParser.Try_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.try_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTry_statement([NotNull] FlexarParser.Try_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatch_statement([NotNull] FlexarParser.Catch_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.catch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatch_statement([NotNull] FlexarParser.Catch_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.finally_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinally_statement([NotNull] FlexarParser.Finally_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.finally_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinally_statement([NotNull] FlexarParser.Finally_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] FlexarParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] FlexarParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.elif_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElif_statement([NotNull] FlexarParser.Elif_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.elif_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElif_statement([NotNull] FlexarParser.Elif_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.else_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElse_statement([NotNull] FlexarParser.Else_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.else_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElse_statement([NotNull] FlexarParser.Else_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.struct_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStruct_func([NotNull] FlexarParser.Struct_funcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.struct_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStruct_func([NotNull] FlexarParser.Struct_funcContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc([NotNull] FlexarParser.FuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc([NotNull] FlexarParser.FuncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.anonymous_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnonymous_func([NotNull] FlexarParser.Anonymous_funcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.anonymous_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnonymous_func([NotNull] FlexarParser.Anonymous_funcContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_param([NotNull] FlexarParser.Func_paramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_param([NotNull] FlexarParser.Func_paramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_callback"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_callback([NotNull] FlexarParser.Func_callbackContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_callback"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_callback([NotNull] FlexarParser.Func_callbackContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_param_callback"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_param_callback([NotNull] FlexarParser.Func_param_callbackContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_param_callback"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_param_callback([NotNull] FlexarParser.Func_param_callbackContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_param_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_param_rule([NotNull] FlexarParser.Func_param_ruleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_param_rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_param_rule([NotNull] FlexarParser.Func_param_ruleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_call([NotNull] FlexarParser.Func_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_call([NotNull] FlexarParser.Func_callContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_call_params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_call_params([NotNull] FlexarParser.Func_call_paramsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_call_params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_call_params([NotNull] FlexarParser.Func_call_paramsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_return([NotNull] FlexarParser.Func_returnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_return([NotNull] FlexarParser.Func_returnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.func_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_body([NotNull] FlexarParser.Func_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.func_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_body([NotNull] FlexarParser.Func_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_statement([NotNull] FlexarParser.Return_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_statement([NotNull] FlexarParser.Return_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.variable_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_declaration([NotNull] FlexarParser.Variable_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.variable_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_declaration([NotNull] FlexarParser.Variable_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.variable_assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_assign([NotNull] FlexarParser.Variable_assignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.variable_assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_assign([NotNull] FlexarParser.Variable_assignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.variable_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_name([NotNull] FlexarParser.Variable_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.variable_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_name([NotNull] FlexarParser.Variable_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.assing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssing([NotNull] FlexarParser.AssingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.assing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssing([NotNull] FlexarParser.AssingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] FlexarParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] FlexarParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FlexarParser.final_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinal_type([NotNull] FlexarParser.Final_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FlexarParser.final_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinal_type([NotNull] FlexarParser.Final_typeContext context);
}
